syntax = "proto3";
import "shared.proto";

// Hello is the first message the subscriber sends after the transport
// session is initiated. The publisher also replies with a Hello.
message Hello {
  // the subscriber/publisher wish to remain anonymous. If the
  // publisher has Krb5 security turned on it will close the
  // connection upon receiving this message.
  message Anonymous {}

  // the subscriber/publisher wishes to initiate a gssapi session
  // using the specified authentication token. In the case of the
  // reply, the token is for mutual authentication.
  message InitiateSession {
    bytes token = 1;
  }

  // In order to prevent spoofing/hijacking, authenticated publishers
  // must prove that they are actually listening on the socket they
  // claim to be listening on. To facilitate this, after a new
  // security context has been created the resolver server will
  // encrypt a random number with it, connect to the write address
  // specified by the publisher, and send the encrypted token. The
  // publisher must decrypt the token using it's end of the security
  // context, add 2 to the number, encrypt it again and send it
  // back. If that round trip succeeds then the new security context
  // will replace any old one, if it fails the new context will be
  // thrown away and the old one will continue to be associated with
  // the write address.
  message ResolverAuthenticate {
    uint64 resolver_id = 1;
    bytes token = 2;
  }

  oneof hello {
    Anonymous Anonymous = 1;
    InitiateSession Initiate = 2;
    ResolverAuthenticate ResolverAuthenticate = 3;
  }
}

// sent by the subscriber to the publisher
message Request {
  // Subscribe to the specified value, if it is not available
  // the result will be NoSuchValue. The optional security
  // token is a proof from the resolver server that this
  // subscription is permitted. In the case of an anonymous
  // connection this proof will be empty.
  message Subscribe {
    string path = 1;
    uint64 resolver = 2;
    // this is encrypted with the session key the publisher shares
    // with the resolver server. after decryption it is a message of
    // type PermissionToken
    bytes token = 3;
  }

  // Unsubscribe from the specified value, this will always result
  // in an Unsubscibed message even if you weren't ever subscribed
  // to the value, or it doesn't exist.
  message Unsubscribe {
    uint64 id = 1;
  }

  oneof request {
    Subscribe Subscribe = 1;
    Unsubscribe Unsubscribe = 2;
  }
}

// sent by the publisher to the subscriber
message Response {  
  // the specified path is not published by this publisher
  message NoSuchValue {
    string path = 1;
  }

  // Permission to subscribe to the specified path is denied
  message Denied {
    string path = 1;
  }

  // You have been unsubscriped from Path. This can be the result
  // of an Unsubscribe message, or it may be sent unsolicited, in
  // the case the value is no longer published, or the publisher is
  // in the process of shutting down.
  message Unsubscribed {
    uint64 id = 1;
  }

  message Heartbeat {}

  // The value of the subscription specified by id has been updated
  message Value {
    uint64 id = 1;
    oneof value {
      uint32 Uint32 = 2;
      uint64 Uint64 = 3;
      sint32 Sint32 = 4;
      sint64 Sint64 = 5;
      float  Float  = 6;
      double Double = 7;
      bool   Bool   = 8;
      string String = 9;
      bytes  Bytes  = 10;
    }
  }

  // You are now subscribed to path. The id of the current_value field
  // is the id of this subscription. From now on this subscription
  // will only be referred to with this id.
  message Subscribed {
    string path = 1;
    Value current_value = 2;
  }

  oneof response {
    NoSuchValue NoSuchValue = 1;
    Denied Denied = 2;
    Subscribed Subscribed = 3;
    Unsubscribed Unsubscribed = 4;
    Heartbeat Heartbeat = 5;
    Value Value = 6;
  }
}
