* 0.12.0 all components

  - fix a resolver client bug that prevented local publishers from
    republishing after the local resolver was restarted.

  - work around some gtk themes (breeze) causing data not to update in
    the browser unless the user forces events to happen. Breeze still
    does strange things to gtk treeview, but at least it displays
    updates properly now. I guess libadwaita can't come soon enough.

  - add the ability to publish aliases. Aliases are very lightweight
    as they do not duplicate any of the internal data structures in
    either the publisher or the subscriber. Subscribers older than
    0.12.0 may behave strangely if they subscribe to the same value
    twice through an alias, therefore if you plan to deploy aliases
    you should upgrade all subscribers to 0.12 or later first.

* 0.11.1 tools

  - fix building the tools on windows

* 0.11.0 all components now go to 11

  - introduce protocol version 2, not backwards compatible with
    version 1. Sorry

    - vastly compressed resolves, resolving a lot of things should use
      much less bandwidth now

    - fix GSSAPI negotiation. This is why v2 is incompatible with v1,
      the change was just too large to work around

    - Add local authentication mechanism, and make authentication
      mechanisms extensible so we can add more in the future without
      another protocol version

  - local machine resolver servers with local authentication
    mechanism. For dev workstations. For desktop apps using the
    browser

  - container server is now a library (as well as a server), it's a
    good basis for some kinds of applications

  - various long standing resolver server bugs fixed (removing default
    publishers, and a list bug)

  - major browser improvements, new widgets, bug fixes, new bscript
    builtins

  - resolver server and client configuration files separated

  - updated book

    - all browser widgets documented

    - updated administration and quick start sections for 0.11

    - reorganized examples

* 0.10.5 browser, netidx, netidx-tools, bscript, protocols

  - bump dependencies for all modules

  - implement context sensitive completion in the browser expression
    inspector windows. It is able to suggest completions for built in
    functions as well as variables that are in scope. Use CRTL+Space
    to trigger it.

* 0.10.4 netidx, netidx-tools, bscript, protocols

  - use cross-krb5 instead of gssapi and winapi directly
  - fix build on mac os

* 0.10.3 netidx-tools

  - fix building on windows, which has been broken for some time due to 
    new tools that require unix, sorry!

* 0.10.0-0.10.2

  - Add arrays to the value datatype. This has some pretty big
    implications,

    - Values are now compound structures, and could be used to
      represent many different kinds of data. e.g. records, matrices,
      trees, maps, just to name a few. It's still recommended that
      users publish additional simple values instead of making
      everything a compound value, however there are cases where
      arrays really make things a lot clearer.

    - The shell tools and bscript now share a parser/pretty printer,
      and as such the shell tools can now parse and print arrays just
      like any other value. The syntax for an array value is [ v0, v1,
      ... vn ], where each value is type prefixed.

    - bscript can now handle arrays, and the view definition has been
      updated to use them where they make sense.

    - old publishers can talk to new subscribers, and new publishers
      can talk to old subscribers as long as they don't use arrays. In
      case they do, the old subscriber should not crash, however it
      won't be able to read the array data.

* 0.9.1 bscript, tools, browser

  - fix the "do" bscript function which was broken, and fix it's
    semantics to match documentation (return the value of the last
    expression instead of nothing)

  - fix a bug in the container that could have resulted in subtrees
    being erroniously deleted. If the user deleted a nested root, the
    container might not have recognized that the subtree had a parent
    root, and would then have deleted it. This has been corrected.

* 0.9.0 netidx, netidx-tools, netidx-browser:

  - Subscriber uses much less memory, a durable subscription now costs
    about 2x a publish of the same value, which is a lot better than
    it has been in the past.

  - Subscriber durable resubscriptions reworked, now we will
    resubscribe in batches of up to 100K instead of just unleashing a
    horde of resubscriptions if the publishers get
    behind. Resubscribing to large numbers of things (e.g. 10 million)
    is now much smoother.

  - Subscriber message rates are about 24% faster unencrypted, and
    about 12% faster encrypted on x86_64 (Skylake). 18% faster
    encrypted on OpenPOWER.

  - Publisher API reworked unfortunatly these are BREAKING
    changes. The rework is meant to solve three problems with the
    previous api.

    - most serious, you had to remember to call flush after updating
      values, if you forgot, nothing would be sent. Now there is a
      structure marked with must_use so you can't accidentially forget
      to flush updates.

    - It wasn't possible with the old api to have concurrent tasks
      using the same publisher but retaining control of their own
      batching. This meant that it was sometimes necessary to create
      separate publishers within the same process just to get control
      of the grouping of updates (e.g. in the recorder).

    - The use of SocketAddr as a unique id for a client was dangerous,
      it has been replaced everywhere with a unique id.

    - The API change had the unintended, but welcome, consequence of
      reorganizing the code and improving performance by a fair bit

      - 32% faster message rates on OpenPower (POWER 9), I think due
        to decreased use of atomic data structures that are not well
        optimized for the platform. Now POWER 9 performance lines up
        much better with other benchmarks vs x86_64 and ARM64.

      - 17% faster message rates on ARM (A72) and x86_64 (Skylake)

      - 20% less memory per published value

  - Publisher advertisements, a middle way between a sparse namespace
    and a fully published one. Uses less memory than a full publish
    but looks identical to subscribers.

  - Paths are now based by ArcStr instead of Arc<str>, this saves 1
    word per path, and makes Path::clone slightly cheaper. This can
    add up to a significant memory savings in the resolver server or a
    large publisher/subscriber (e.g. 10 million paths costs 800 MiB
    less after this change).

  - Documented the rpc module.

  - the rpc protocol now allows procedure arguments to be specified
    multiple times. The server side will receive a list of all values
    specified for each key.

  - the rpc client now includes internal synchronization to prevent
    errors when the same procedure is called concurrently from the
    same subscriber instance.

  - fix: in bscript multiple concurrent rpc calls to the same function
    could result in return values getting mixed up or duplicated.

  - added CALL command to call an RPC from the subscriber command line
    tool.

  - new tool, container, a persistant, bscript enabled, value
    store. Kinda like a distributed spreadsheet. Kinda like a nosql
    database server. Kinda just it's own thing. Using sled for
    persistant storage.

  - the bscript call function now takes a trigger argument. The rpc
    will only be called when the trigger argument updates, or once
    initially if the trigger has a current value. This allows much
    easier use of the call function in event handlers.

  - Fix additional resolver server bugs related to removal of default
    publishers. Due to protocol changes 0.9 publishers require a 0.9
    resolver server if they use the default publisher feature. Old
    publishers will still work with the 0.9 resolver server, however
    if they use default publishers it is recommended to recompile
    against 0.9.

* 0.8.1 netidx, netidx-tools:
  - fix a bug in the resolver server which would cause it to hang on
    to default publishers until the process is restarted even if the
    publisher itself timed out or explicitly sent clear. This bug was
    caused by the sharding implementation, and would effect the
    default configuration. Only the resolver server needs to be
    upgraded to fix this bug, it is backwards compatible with
    everything 0.8.0 was compatible with. Publishers and subscribers
    can keep using 0.8.0, nothing changes for them. Parallel
    programming is hard even in rust, sorry :-(

  - added a test to check default publisher functionality, including
    that it goes away!

* 0.8.0 netidx, protocols, netproto, tools, browser:
  - The command line publisher can now accept writes, simply say
    WRITE|PATH to enable writes for PATH. Written values will be sent
    to stdout in the same format as the command line subscriber. PATH
    will be published with a value of null if it hasn't been published
    previously

  - Crate cleanup: netidx-protocols was split into 3 crates
    - netidx-bscript: The bscript parser, and vm implementation
    - netidx-archive: The archive file reader/writer library
    - netidx-protocols: Actual protocols built on top of netidx

  - the big bscript refactor: The bscript VM along with the
    implementation of the core of the language was moved out of the
    browser and combined with the parser, which was moved out of
    netidx-protocols to form netidx-bscript. Now it should be possible
    to use bscript in other projects besides the browser, and I have
    one planned soon. No semantic changes were intended as a result of
    this refactor.

  - table is now bscript enabled. Path, default sort column, default
    sort direction, filter mode, and the filter are now set by bscript
    expressions instead of hard coded in the editor.

    Moreover, tables can be made editable, and three new events are
    exposed to make this useful,

      - on activate: allows you to control what happens when the user
        double clicks a row, or presses enter if the table isn't
        editable. event() produces the path of the row, and the
        default expression is, navigate(event()), which does the same
        thing the browser does now.

      - on select: updates when the user selects a cell, event() is
        the path of the newly selected cell.

      - on edit: updates when the user edits a cell, event() is the
        new value.

  - Implemented new wigets, linkbutton, frame, paned, and notebook.

  - API change, the return value of Subscriber::subscribe is now a
    FuturesUnordered collection instead of a Vec. This allows
    applications to get subscriptions as they individually complete
    instead of being forced to wait until the entire batch is
    done. The old behavior can be easily replicated by just calling
    collect (from StreamExt in futures-rs) on the returned stream.

  - Major refactor of durable subscriptions. Previously the durable
    subscriber kept track of one outstanding batch of subscriptions at
    a time. This meant that if one of the publishers in the batch was
    hung, or just slow, subscriptions would have to wait until it's
    timeout expired to be processed.

    Now the durable subscriber can keep track of any number of
    outstanding subscribe batches, and more importantly, it will
    process every subscription individually as soon as it resolves. So
    now if a publisher hangs, it won't become a poisioned chalice that
    slows down subscriptions to unrelated publishers.

* 0.7.3 netidx-tools:
  - Additional error handling fixes in the recorder.

* 0.7.2 netidx-tools:
  - Make the recorder more robust to transient resolver server
    failures.

* 0.7.1 netidx-tools:
  - Add the DROP command to the command line publisher to stop
    publishing a path
  - Add oneshot mode to the subscriber
  - Add no-stdin mode to subscriber
  - Add a subscriber option to abandon a subscription if it doesn't
    succeed before a passed in timeout
  - Subscriber will now automatically subscribe when you write, and if
    a write is queued it will tell you how many writes are in the
    queue for a given path

* 0.7 netidx, netidx-tools, netidx-browser, netidx-protocols:
  - major update to the filter language syntax and semantics
  - add netidx rpc to protocols, use it in the recorder, implement it
    in the browser formula language
  - add the ability for the publisher to set flags on a published path
    in the resolver server. Implement a flag to force subscriber to
    use an existing connection where possible instead of picking a
    random publisher address. Use this flag to handle multiple
    publishers of the same rpc, and the control interface in the
    recorder. This protocol change requires the resolver server to be
    updated, but is backwards compatible with older clients.

* 0.6.1 netidx netidx-tools netidx-core:
  - small semantic change in subscriber, writes to a dval now queue
    when the subscription is not connected and are sent on
    reconnect. Previously they would be dropped.
  - Fix recorder hang when setting state to play when it's tail
  - Put limits on the number of sessions allowed per client and total,
    and pick reasonable defaults.
  - add a few support methods to netidx core

* 0.6.1 browser:
  - Fix several really dumb bugs in the formula parser
  - Fix the browser's formula inspector closing whenever you change
    something
  - Fix the browser's formula inspector sometimes shows stale values
  - Fix the evaluation of the any() formula so it also works with
    constant sources

* 0.6.0:
  - New tool, netidx recorder, records subscriptions to compact
    archive files and publishes archive files.
  - Add list_matching and check_changed methods to ResolverRead. Both
    methods can't be used with older resolver servers, however older
    clients can still talk to a newer resolver server.
  - Plug a couple of holes that could allow non canonical paths to be
    created
  - Fix a bunch of bugs coming from an incorrect test for path
    parenthood. Including a potential referral loop with a complex
    cluster.
  - Change the len and const_len method names of Pack to encoded_len,
    and const_encoded_len to avoid confusion.
  - Implement From on Value for most primitive types.
  - Add a trait, FromValue, that behaves like FromStr, and implement
    it for many primitive types. Refactor cast_* methods into
    cast_to::<T> where T: FromValue.
  - Tune the resolver server to give much higher priority to Resolve
    over List, Table and especially ListMatching calls.
  - Reorganize the project so rust-analyzer will work on all the sub
    projects.
  - Allow the option in subscriber to stop storing the last value
    received for about 12% improved performance on Intel (on ppc64le
    it's worth something like +50%).
  - command line 'resolver list' now takes globs, and can poll for
    changes
  - Implement a write dialog in the browser table view.
  - Move to Tokio 1.0 and Bytes 1.0

* 0.5.1:
  - Resolver server: improve the performance of sharding (eliminate
    integer division) for a noticable speedup processing large
    batches.
  - Put an upper bound on total pool size to avoid various extreme
    scenarios causing unbounded memory usage.
  - Pool more buffers in the resolver server to reduce dynamic
    allocation.
  - Fix a bug in the new sharded resolver store that broke default
    publishing.
  - Fix unit tests.

* 0.5.0:
  - Update to tokio 0.3 aka 1.0
  - Implement timeout logic in the resolver client to deal with the
    case where a resolver server is hung. The rule is, minimum timeout
    15 seconds or 6 microseconds per operation in the batch for reads
    and 12 microseconds per operation in the batch for writes,
    whichever timeout is longer.
  - Limit reads and writes to a maximum batch size to prevent doing
    too much work at once on a tokio worker thread, and reader/writer
    starvation, The max batch sizes are are 1000K ops for readers and
    100K ops for writers. Cleaning up dead publishers are included in
    these limits. Results are flushed back to the client after each
    chunk so that we interact properly with the hang detection feature
    mentioned above.
  - The resolver now uses all cores for reads and writes, and no longer
    uses locking, instead the database is sharded internally with each
    CPU controlling a shard. Batches are hashed by path and sent out
    to their corresponding shard (or all of them in the case of
    e.g. list). Performance for large publishers and/or lots of
    publishers on machines with a lot of cores is vastly improved.
  - Improve a degenerate case in resolver_store when lots of
    publishers publish the same paths. It's still N^2, but the
    constants are much better, and it's now not an issue to get to
    thousands of publishers publishing the same set of paths, probably
    more than you'd ever want in practice.
  - Fix a bug in the resolver client that would cause a long running
    write connection to stop after the heartbeat interval.
  - Fix a design flaw in the secstore. Now it will always keep the
    security context around for a publisher for as long as that
    publisher is alive.
  - Caching of read security contexts is no longer supported after I
    found that some (older) implementations of kerberos hold an open
    file per ctx for the replay cache. Since we must keep a live ctx
    for each live publisher you may need to raise the allowed number
    of open file descriptors to avoid starvation if you use an
    effected kerberos distribution. The number of open files should be
    at least P + 2*C, where P is the number of publishers and C is the
    number of allowed simultaneous connections. Alternatively you can
    disable the replay cache by setting KRB5RCACHETYPE=none. This is
    not recommended as it opens you to token replay attacks.
  - Fix a bug in the resolver server connection tracking logic that
    caused the number of counted open connections to be higher than
    the actual number when the counted connections are live publishers
    that are heartbeating but not actually connected. This could cause
    read and write starvation with a large number of publishers.
  - No longer fail publisher flushes when the publisher can't reach
    any resolver server, instead log the error and keep trying
    forever. There is just no combination of timeouts and or logic
    that seems better. The means that publisher::flush now cannot fail.
  - Fix a bug in publisher that would cause new published names not to
    be sent to the resolver if they are queued while a flush operation
    is in progress.
  - NO protocol changes in 0.5, it's safe to mix any 0.5 with any 0.4
    component. The major version bump is due to tokio 0.3 being a
    potentially large change.

* 0.4.2:
  - Fix browser design mode widget highlights are wrong when there are
    nested grids.
  - Maybe fix an intermittant issue with design mode where invisible
    widgets are still interactable in the properties view and the
    visible widgets are not.
  - Make the WIP book the homepage

* 0.4.1:
  - Fix browser can't get out of raw mode.
  - Subscriber: Tweak the semantics when registering a duplicate
    channel for updates on a subscription. Now, if begin_with_last is
    true, the duplicate channel will receive an update with the current
    state even though the registration will be ignored.
  - Reduce allocation in the command line publisher.
  - Fix a bug in the resolver store that would result in ghost columns
    remaining in the browser even after data was removed. Enhanced
    tests to cover the columns method.
  - Fix a bug in resolver store that would result in a list of a path
    with a trailing slash recursively listing all children. While this
    might seem useful it wouldn't work in a hierarchical cluster, so
    the easiest thing to do is remove it. In any case for a large
    server it could be quite a bit more dangerous than a simple list,
    especially if triggered accidentally.
  - Change the way null is published in the shell publisher such that
    it is possible to publish a string "null", sorry :facepalm:.
  - Fix subscriber connection might decide it's idle and disconnect
    when there are pending subscription requests in it's
    queue. subscriber will now disconnect immediatly when the last
    subscription is unsubscribed and there are no queued
    subscriptions.

* 0.4.0:
  - protocol breaking changes (additions). 0.4 will be the last non
    backwards compatible protocol, from here on protocol breaking
    changes will introduce a new protocol version, and new library
    versions will be able to speak to old clients using at least one
    protocol version less than the current one.
  - allow publisher to unicast to specific subscribers
  - writes can return success or failure instead of silently eating
    errors. This behavior is not mandatory, as it has a performance
    impact.
  - netidx browser is now a separate binary from the tools
  - netidx browser "views", publishable and editable custom guis
  - subscriber will notify explicitly when a subscription is
    unsubscribed. This imposes minimal to no overhead due to rust
    being awesome
  - simplify durable subscriber, shrink it's memory usage a couple of
    words per subscription
  - eliminate a race between durable subscriber subscription state and
    updates. Facepalm averted.
  - add many useful value types, e.g. Result, DateTime, Duration
  - It is now possible to build on Mac OS by disabling the (default)
    krb5_iov feature. This will result in reduced performance when
    talking to encrypted services, but it works.
  - netidx-protocols breaking. View definitions are not backwards
    compatible with 0.3, and given how much development is going on in
    the browser I would expect more breaking changes to view
    definitions for a while. At some point it will settle down, and I
    will start to version that protocol just like the
    resolver/publisher protocol, but for the moment it's much easier
    to just move fast and break it.
  - various improvements to the command line tools, some of which are
    breaking changes. e.g. publisher and subscriber write now take a
    triple of path, type, value, instead of path, value.

* 0.3.2:
  - minor api enhancement. add update_changed, and current to
    publisher::Val

* 0.3.1:
  - make publisher::Id public again, sorry!

* 0.3.0:
  - basic netidx browser added to tools, more is planned for it
  - protocol not compatible with previous versions
  - subscriber Val::last and Dval::last are no longer async

* 0.2.0:
  - trim tokio features to the required set
  - config in dns is removed due to limitations, which is really sad
    because it was damn cool
  - reduce buffer slack
  - fix a few cases where we didn't set tcp nodelay
  - many windows releated bugs fixed
  - test extensively on windows
  - protocol not compatible with previous versions

* 0.1.2:
  - Experimental support for publisher/subscriber on windows

* 0.1.1:
  - Fix some bugs

* 0.1.0:
  -Initial release
