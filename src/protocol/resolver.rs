// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `resolver.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello {
    // message oneof groups
    pub hello: ::std::option::Option<ClientHello_oneof_hello>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello {
    fn default() -> &'a ClientHello {
        <ClientHello as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientHello_oneof_hello {
    ReadOnly(ClientHello_Read),
    WriteOnly(ClientHello_Write),
}

impl ClientHello {
    pub fn new() -> ClientHello {
        ::std::default::Default::default()
    }

    // .ClientHello.Read ReadOnly = 1;


    pub fn get_ReadOnly(&self) -> &ClientHello_Read {
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(ref v)) => v,
            _ => ClientHello_Read::default_instance(),
        }
    }
    pub fn clear_ReadOnly(&mut self) {
        self.hello = ::std::option::Option::None;
    }

    pub fn has_ReadOnly(&self) -> bool {
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ReadOnly(&mut self, v: ClientHello_Read) {
        self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ReadOnly(&mut self) -> &mut ClientHello_Read {
        if let ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(_)) = self.hello {
        } else {
            self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(ClientHello_Read::new()));
        }
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ReadOnly(&mut self) -> ClientHello_Read {
        if self.has_ReadOnly() {
            match self.hello.take() {
                ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Read::new()
        }
    }

    // .ClientHello.Write WriteOnly = 2;


    pub fn get_WriteOnly(&self) -> &ClientHello_Write {
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(ref v)) => v,
            _ => ClientHello_Write::default_instance(),
        }
    }
    pub fn clear_WriteOnly(&mut self) {
        self.hello = ::std::option::Option::None;
    }

    pub fn has_WriteOnly(&self) -> bool {
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_WriteOnly(&mut self, v: ClientHello_Write) {
        self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(v))
    }

    // Mutable pointer to the field.
    pub fn mut_WriteOnly(&mut self) -> &mut ClientHello_Write {
        if let ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(_)) = self.hello {
        } else {
            self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(ClientHello_Write::new()));
        }
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_WriteOnly(&mut self) -> ClientHello_Write {
        if self.has_WriteOnly() {
            match self.hello.take() {
                ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Write::new()
        }
    }
}

impl ::protobuf::Message for ClientHello {
    fn is_initialized(&self) -> bool {
        if let Some(ClientHello_oneof_hello::ReadOnly(ref v)) = self.hello {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_oneof_hello::WriteOnly(ref v)) = self.hello {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.hello {
            match v {
                &ClientHello_oneof_hello::ReadOnly(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_oneof_hello::WriteOnly(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.hello {
            match v {
                &ClientHello_oneof_hello::ReadOnly(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_oneof_hello::WriteOnly(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello {
        ClientHello::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Read>(
                    "ReadOnly",
                    ClientHello::has_ReadOnly,
                    ClientHello::get_ReadOnly,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Write>(
                    "WriteOnly",
                    ClientHello::has_WriteOnly,
                    ClientHello::get_WriteOnly,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello>(
                    "ClientHello",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello {
    fn clear(&mut self) {
        self.hello = ::std::option::Option::None;
        self.hello = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Read {
    // message oneof groups
    pub auth: ::std::option::Option<ClientHello_Read_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read {
    fn default() -> &'a ClientHello_Read {
        <ClientHello_Read as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientHello_Read_oneof_auth {
    Anonymous(ClientHello_Read_Anonymous),
    Reuse(ClientHello_Read_Reuse),
    Initiate(ClientHello_Read_Initiate),
}

impl ClientHello_Read {
    pub fn new() -> ClientHello_Read {
        ::std::default::Default::default()
    }

    // .ClientHello.Read.Anonymous Anonymous = 1;


    pub fn get_Anonymous(&self) -> &ClientHello_Read_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(ref v)) => v,
            _ => ClientHello_Read_Anonymous::default_instance(),
        }
    }
    pub fn clear_Anonymous(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Anonymous(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Anonymous(&mut self, v: ClientHello_Read_Anonymous) {
        self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Anonymous(&mut self) -> &mut ClientHello_Read_Anonymous {
        if let ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(ClientHello_Read_Anonymous::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Anonymous(&mut self) -> ClientHello_Read_Anonymous {
        if self.has_Anonymous() {
            match self.auth.take() {
                ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Read_Anonymous::new()
        }
    }

    // .ClientHello.Read.Reuse Reuse = 2;


    pub fn get_Reuse(&self) -> &ClientHello_Read_Reuse {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(ref v)) => v,
            _ => ClientHello_Read_Reuse::default_instance(),
        }
    }
    pub fn clear_Reuse(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Reuse(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Reuse(&mut self, v: ClientHello_Read_Reuse) {
        self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Reuse(&mut self) -> &mut ClientHello_Read_Reuse {
        if let ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(ClientHello_Read_Reuse::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Reuse(&mut self) -> ClientHello_Read_Reuse {
        if self.has_Reuse() {
            match self.auth.take() {
                ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Read_Reuse::new()
        }
    }

    // .ClientHello.Read.Initiate Initiate = 3;


    pub fn get_Initiate(&self) -> &ClientHello_Read_Initiate {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(ref v)) => v,
            _ => ClientHello_Read_Initiate::default_instance(),
        }
    }
    pub fn clear_Initiate(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Initiate(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Initiate(&mut self, v: ClientHello_Read_Initiate) {
        self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Initiate(&mut self) -> &mut ClientHello_Read_Initiate {
        if let ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(ClientHello_Read_Initiate::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Initiate(&mut self) -> ClientHello_Read_Initiate {
        if self.has_Initiate() {
            match self.auth.take() {
                ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Read_Initiate::new()
        }
    }
}

impl ::protobuf::Message for ClientHello_Read {
    fn is_initialized(&self) -> bool {
        if let Some(ClientHello_Read_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Read_oneof_auth::Reuse(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Read_oneof_auth::Initiate(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Read_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Read_oneof_auth::Reuse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Read_oneof_auth::Initiate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Read_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Read_oneof_auth::Reuse(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Read_oneof_auth::Initiate(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read {
        ClientHello_Read::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Read_Anonymous>(
                    "Anonymous",
                    ClientHello_Read::has_Anonymous,
                    ClientHello_Read::get_Anonymous,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Read_Reuse>(
                    "Reuse",
                    ClientHello_Read::has_Reuse,
                    ClientHello_Read::get_Reuse,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Read_Initiate>(
                    "Initiate",
                    ClientHello_Read::has_Initiate,
                    ClientHello_Read::get_Initiate,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Read>(
                    "ClientHello.Read",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Read {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read {
    fn clear(&mut self) {
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Read {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Read_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read_Anonymous {
    fn default() -> &'a ClientHello_Read_Anonymous {
        <ClientHello_Read_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Read_Anonymous {
    pub fn new() -> ClientHello_Read_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientHello_Read_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read_Anonymous {
        ClientHello_Read_Anonymous::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Read_Anonymous>(
                    "ClientHello.Read.Anonymous",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Read_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Read_Anonymous {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Read_Reuse {
    // message fields
    pub session_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read_Reuse {
    fn default() -> &'a ClientHello_Read_Reuse {
        <ClientHello_Read_Reuse as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Read_Reuse {
    pub fn new() -> ClientHello_Read_Reuse {
        ::std::default::Default::default()
    }

    // uint64 session_id = 1;


    pub fn get_session_id(&self) -> u64 {
        self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u64) {
        self.session_id = v;
    }
}

impl ::protobuf::Message for ClientHello_Read_Reuse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.session_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.session_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_id != 0 {
            os.write_uint64(1, self.session_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read_Reuse {
        ClientHello_Read_Reuse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "session_id",
                    |m: &ClientHello_Read_Reuse| { &m.session_id },
                    |m: &mut ClientHello_Read_Reuse| { &mut m.session_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Read_Reuse>(
                    "ClientHello.Read.Reuse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Read_Reuse {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read_Reuse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read_Reuse::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read_Reuse {
    fn clear(&mut self) {
        self.session_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Read_Reuse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read_Reuse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Read_Initiate {
    // message fields
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read_Initiate {
    fn default() -> &'a ClientHello_Read_Initiate {
        <ClientHello_Read_Initiate as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Read_Initiate {
    pub fn new() -> ClientHello_Read_Initiate {
        ::std::default::Default::default()
    }

    // bytes token = 1;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::bytes::Bytes) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::bytes::Bytes {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.token, ::bytes::Bytes::new())
    }
}

impl ::protobuf::Message for ClientHello_Read_Initiate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_bytes(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read_Initiate {
        ClientHello_Read_Initiate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                    "token",
                    |m: &ClientHello_Read_Initiate| { &m.token },
                    |m: &mut ClientHello_Read_Initiate| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Read_Initiate>(
                    "ClientHello.Read.Initiate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Read_Initiate {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read_Initiate> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read_Initiate::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read_Initiate {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Read_Initiate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read_Initiate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Write {
    // message fields
    pub write_addr: ::protobuf::SingularPtrField<super::shared::SocketAddr>,
    pub auth: ::protobuf::SingularPtrField<ClientHello_Write_Auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write {
    fn default() -> &'a ClientHello_Write {
        <ClientHello_Write as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write {
    pub fn new() -> ClientHello_Write {
        ::std::default::Default::default()
    }

    // .SocketAddr write_addr = 1;


    pub fn get_write_addr(&self) -> &super::shared::SocketAddr {
        self.write_addr.as_ref().unwrap_or_else(|| super::shared::SocketAddr::default_instance())
    }
    pub fn clear_write_addr(&mut self) {
        self.write_addr.clear();
    }

    pub fn has_write_addr(&self) -> bool {
        self.write_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_write_addr(&mut self, v: super::shared::SocketAddr) {
        self.write_addr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_write_addr(&mut self) -> &mut super::shared::SocketAddr {
        if self.write_addr.is_none() {
            self.write_addr.set_default();
        }
        self.write_addr.as_mut().unwrap()
    }

    // Take field
    pub fn take_write_addr(&mut self) -> super::shared::SocketAddr {
        self.write_addr.take().unwrap_or_else(|| super::shared::SocketAddr::new())
    }

    // .ClientHello.Write.Auth auth = 2;


    pub fn get_auth(&self) -> &ClientHello_Write_Auth {
        self.auth.as_ref().unwrap_or_else(|| ClientHello_Write_Auth::default_instance())
    }
    pub fn clear_auth(&mut self) {
        self.auth.clear();
    }

    pub fn has_auth(&self) -> bool {
        self.auth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth(&mut self, v: ClientHello_Write_Auth) {
        self.auth = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth(&mut self) -> &mut ClientHello_Write_Auth {
        if self.auth.is_none() {
            self.auth.set_default();
        }
        self.auth.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth(&mut self) -> ClientHello_Write_Auth {
        self.auth.take().unwrap_or_else(|| ClientHello_Write_Auth::new())
    }
}

impl ::protobuf::Message for ClientHello_Write {
    fn is_initialized(&self) -> bool {
        for v in &self.write_addr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.auth {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.write_addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.auth)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.write_addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.write_addr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.auth.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write {
        ClientHello_Write::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::shared::SocketAddr>>(
                    "write_addr",
                    |m: &ClientHello_Write| { &m.write_addr },
                    |m: &mut ClientHello_Write| { &mut m.write_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientHello_Write_Auth>>(
                    "auth",
                    |m: &ClientHello_Write| { &m.auth },
                    |m: &mut ClientHello_Write| { &mut m.auth },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Write>(
                    "ClientHello.Write",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Write {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write {
    fn clear(&mut self) {
        self.write_addr.clear();
        self.auth.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Write {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Write_Auth {
    // message oneof groups
    pub auth: ::std::option::Option<ClientHello_Write_Auth_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth {
    fn default() -> &'a ClientHello_Write_Auth {
        <ClientHello_Write_Auth as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientHello_Write_Auth_oneof_auth {
    Anonymous(ClientHello_Write_Auth_Anonymous),
    Reuse(ClientHello_Write_Auth_Reuse),
    Initiate(ClientHello_Write_Auth_Initiate),
}

impl ClientHello_Write_Auth {
    pub fn new() -> ClientHello_Write_Auth {
        ::std::default::Default::default()
    }

    // .ClientHello.Write.Auth.Anonymous Anonymous = 1;


    pub fn get_Anonymous(&self) -> &ClientHello_Write_Auth_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(ref v)) => v,
            _ => ClientHello_Write_Auth_Anonymous::default_instance(),
        }
    }
    pub fn clear_Anonymous(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Anonymous(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Anonymous(&mut self, v: ClientHello_Write_Auth_Anonymous) {
        self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Anonymous(&mut self) -> &mut ClientHello_Write_Auth_Anonymous {
        if let ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(ClientHello_Write_Auth_Anonymous::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Anonymous(&mut self) -> ClientHello_Write_Auth_Anonymous {
        if self.has_Anonymous() {
            match self.auth.take() {
                ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Write_Auth_Anonymous::new()
        }
    }

    // .ClientHello.Write.Auth.Reuse Reuse = 2;


    pub fn get_Reuse(&self) -> &ClientHello_Write_Auth_Reuse {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(ref v)) => v,
            _ => ClientHello_Write_Auth_Reuse::default_instance(),
        }
    }
    pub fn clear_Reuse(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Reuse(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Reuse(&mut self, v: ClientHello_Write_Auth_Reuse) {
        self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Reuse(&mut self) -> &mut ClientHello_Write_Auth_Reuse {
        if let ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(ClientHello_Write_Auth_Reuse::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Reuse(&mut self) -> ClientHello_Write_Auth_Reuse {
        if self.has_Reuse() {
            match self.auth.take() {
                ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Write_Auth_Reuse::new()
        }
    }

    // .ClientHello.Write.Auth.Initiate Initiate = 3;


    pub fn get_Initiate(&self) -> &ClientHello_Write_Auth_Initiate {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(ref v)) => v,
            _ => ClientHello_Write_Auth_Initiate::default_instance(),
        }
    }
    pub fn clear_Initiate(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Initiate(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Initiate(&mut self, v: ClientHello_Write_Auth_Initiate) {
        self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Initiate(&mut self) -> &mut ClientHello_Write_Auth_Initiate {
        if let ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(ClientHello_Write_Auth_Initiate::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Initiate(&mut self) -> ClientHello_Write_Auth_Initiate {
        if self.has_Initiate() {
            match self.auth.take() {
                ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientHello_Write_Auth_Initiate::new()
        }
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth {
    fn is_initialized(&self) -> bool {
        if let Some(ClientHello_Write_Auth_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Write_Auth_oneof_auth::Reuse(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Write_Auth_oneof_auth::Initiate(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Write_Auth_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Write_Auth_oneof_auth::Reuse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Write_Auth_oneof_auth::Initiate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Write_Auth_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Write_Auth_oneof_auth::Reuse(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Write_Auth_oneof_auth::Initiate(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth {
        ClientHello_Write_Auth::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Write_Auth_Anonymous>(
                    "Anonymous",
                    ClientHello_Write_Auth::has_Anonymous,
                    ClientHello_Write_Auth::get_Anonymous,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Write_Auth_Reuse>(
                    "Reuse",
                    ClientHello_Write_Auth::has_Reuse,
                    ClientHello_Write_Auth::get_Reuse,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientHello_Write_Auth_Initiate>(
                    "Initiate",
                    ClientHello_Write_Auth::has_Initiate,
                    ClientHello_Write_Auth::get_Initiate,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Write_Auth>(
                    "ClientHello.Write.Auth",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Write_Auth {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth {
    fn clear(&mut self) {
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Write_Auth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Write_Auth_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth_Anonymous {
    fn default() -> &'a ClientHello_Write_Auth_Anonymous {
        <ClientHello_Write_Auth_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write_Auth_Anonymous {
    pub fn new() -> ClientHello_Write_Auth_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth_Anonymous {
        ClientHello_Write_Auth_Anonymous::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Write_Auth_Anonymous>(
                    "ClientHello.Write.Auth.Anonymous",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Write_Auth_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Write_Auth_Anonymous {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Write_Auth_Reuse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth_Reuse {
    fn default() -> &'a ClientHello_Write_Auth_Reuse {
        <ClientHello_Write_Auth_Reuse as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write_Auth_Reuse {
    pub fn new() -> ClientHello_Write_Auth_Reuse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth_Reuse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth_Reuse {
        ClientHello_Write_Auth_Reuse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Write_Auth_Reuse>(
                    "ClientHello.Write.Auth.Reuse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Write_Auth_Reuse {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth_Reuse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth_Reuse::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth_Reuse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Write_Auth_Reuse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth_Reuse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientHello_Write_Auth_Initiate {
    // message fields
    pub spn: ::protobuf::Chars,
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth_Initiate {
    fn default() -> &'a ClientHello_Write_Auth_Initiate {
        <ClientHello_Write_Auth_Initiate as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write_Auth_Initiate {
    pub fn new() -> ClientHello_Write_Auth_Initiate {
        ::std::default::Default::default()
    }

    // string spn = 1;


    pub fn get_spn(&self) -> &str {
        &self.spn
    }
    pub fn clear_spn(&mut self) {
        ::protobuf::Clear::clear(&mut self.spn);
    }

    // Param is passed by value, moved
    pub fn set_spn(&mut self, v: ::protobuf::Chars) {
        self.spn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spn(&mut self) -> &mut ::protobuf::Chars {
        &mut self.spn
    }

    // Take field
    pub fn take_spn(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.spn, ::protobuf::Chars::new())
    }

    // bytes token = 2;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::bytes::Bytes) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::bytes::Bytes {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.token, ::bytes::Bytes::new())
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth_Initiate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.spn)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.spn.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.spn);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.spn.is_empty() {
            os.write_string(1, &self.spn)?;
        }
        if !self.token.is_empty() {
            os.write_bytes(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth_Initiate {
        ClientHello_Write_Auth_Initiate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "spn",
                    |m: &ClientHello_Write_Auth_Initiate| { &m.spn },
                    |m: &mut ClientHello_Write_Auth_Initiate| { &mut m.spn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                    "token",
                    |m: &ClientHello_Write_Auth_Initiate| { &m.token },
                    |m: &mut ClientHello_Write_Auth_Initiate| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientHello_Write_Auth_Initiate>(
                    "ClientHello.Write.Auth.Initiate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientHello_Write_Auth_Initiate {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth_Initiate> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth_Initiate::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth_Initiate {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.spn);
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientHello_Write_Auth_Initiate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth_Initiate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloRead {
    // message oneof groups
    pub auth: ::std::option::Option<ServerHelloRead_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead {
    fn default() -> &'a ServerHelloRead {
        <ServerHelloRead as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ServerHelloRead_oneof_auth {
    Anonymous(ServerHelloRead_Anonymous),
    Reused(ServerHelloRead_Reused),
    Accepted(ServerHelloRead_Accepted),
}

impl ServerHelloRead {
    pub fn new() -> ServerHelloRead {
        ::std::default::Default::default()
    }

    // .ServerHelloRead.Anonymous Anonymous = 1;


    pub fn get_Anonymous(&self) -> &ServerHelloRead_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(ref v)) => v,
            _ => ServerHelloRead_Anonymous::default_instance(),
        }
    }
    pub fn clear_Anonymous(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Anonymous(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Anonymous(&mut self, v: ServerHelloRead_Anonymous) {
        self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Anonymous(&mut self) -> &mut ServerHelloRead_Anonymous {
        if let ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(ServerHelloRead_Anonymous::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Anonymous(&mut self) -> ServerHelloRead_Anonymous {
        if self.has_Anonymous() {
            match self.auth.take() {
                ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerHelloRead_Anonymous::new()
        }
    }

    // .ServerHelloRead.Reused Reused = 2;


    pub fn get_Reused(&self) -> &ServerHelloRead_Reused {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(ref v)) => v,
            _ => ServerHelloRead_Reused::default_instance(),
        }
    }
    pub fn clear_Reused(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Reused(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Reused(&mut self, v: ServerHelloRead_Reused) {
        self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Reused(&mut self) -> &mut ServerHelloRead_Reused {
        if let ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(ServerHelloRead_Reused::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Reused(&mut self) -> ServerHelloRead_Reused {
        if self.has_Reused() {
            match self.auth.take() {
                ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerHelloRead_Reused::new()
        }
    }

    // .ServerHelloRead.Accepted Accepted = 3;


    pub fn get_Accepted(&self) -> &ServerHelloRead_Accepted {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(ref v)) => v,
            _ => ServerHelloRead_Accepted::default_instance(),
        }
    }
    pub fn clear_Accepted(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Accepted(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Accepted(&mut self, v: ServerHelloRead_Accepted) {
        self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Accepted(&mut self) -> &mut ServerHelloRead_Accepted {
        if let ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(ServerHelloRead_Accepted::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Accepted(&mut self) -> ServerHelloRead_Accepted {
        if self.has_Accepted() {
            match self.auth.take() {
                ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerHelloRead_Accepted::new()
        }
    }
}

impl ::protobuf::Message for ServerHelloRead {
    fn is_initialized(&self) -> bool {
        if let Some(ServerHelloRead_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloRead_oneof_auth::Reused(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloRead_oneof_auth::Accepted(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloRead_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloRead_oneof_auth::Reused(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloRead_oneof_auth::Accepted(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloRead_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloRead_oneof_auth::Reused(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloRead_oneof_auth::Accepted(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead {
        ServerHelloRead::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerHelloRead_Anonymous>(
                    "Anonymous",
                    ServerHelloRead::has_Anonymous,
                    ServerHelloRead::get_Anonymous,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerHelloRead_Reused>(
                    "Reused",
                    ServerHelloRead::has_Reused,
                    ServerHelloRead::get_Reused,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerHelloRead_Accepted>(
                    "Accepted",
                    ServerHelloRead::has_Accepted,
                    ServerHelloRead::get_Accepted,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloRead>(
                    "ServerHelloRead",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloRead {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead {
    fn clear(&mut self) {
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloRead {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloRead_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead_Anonymous {
    fn default() -> &'a ServerHelloRead_Anonymous {
        <ServerHelloRead_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloRead_Anonymous {
    pub fn new() -> ServerHelloRead_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloRead_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead_Anonymous {
        ServerHelloRead_Anonymous::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloRead_Anonymous>(
                    "ServerHelloRead.Anonymous",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloRead_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloRead_Anonymous {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloRead_Reused {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead_Reused {
    fn default() -> &'a ServerHelloRead_Reused {
        <ServerHelloRead_Reused as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloRead_Reused {
    pub fn new() -> ServerHelloRead_Reused {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloRead_Reused {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead_Reused {
        ServerHelloRead_Reused::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloRead_Reused>(
                    "ServerHelloRead.Reused",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloRead_Reused {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead_Reused> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead_Reused::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead_Reused {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloRead_Reused {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead_Reused {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloRead_Accepted {
    // message fields
    pub context_id: u64,
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead_Accepted {
    fn default() -> &'a ServerHelloRead_Accepted {
        <ServerHelloRead_Accepted as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloRead_Accepted {
    pub fn new() -> ServerHelloRead_Accepted {
        ::std::default::Default::default()
    }

    // uint64 context_id = 1;


    pub fn get_context_id(&self) -> u64 {
        self.context_id
    }
    pub fn clear_context_id(&mut self) {
        self.context_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_context_id(&mut self, v: u64) {
        self.context_id = v;
    }

    // bytes token = 2;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::bytes::Bytes) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::bytes::Bytes {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.token, ::bytes::Bytes::new())
    }
}

impl ::protobuf::Message for ServerHelloRead_Accepted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.context_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.context_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.context_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.context_id != 0 {
            os.write_uint64(1, self.context_id)?;
        }
        if !self.token.is_empty() {
            os.write_bytes(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead_Accepted {
        ServerHelloRead_Accepted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "context_id",
                    |m: &ServerHelloRead_Accepted| { &m.context_id },
                    |m: &mut ServerHelloRead_Accepted| { &mut m.context_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                    "token",
                    |m: &ServerHelloRead_Accepted| { &m.token },
                    |m: &mut ServerHelloRead_Accepted| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloRead_Accepted>(
                    "ServerHelloRead.Accepted",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloRead_Accepted {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead_Accepted> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead_Accepted::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead_Accepted {
    fn clear(&mut self) {
        self.context_id = 0;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloRead_Accepted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead_Accepted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloWrite {
    // message fields
    pub ttl_expired: bool,
    pub resolver_id: u64,
    // message oneof groups
    pub auth: ::std::option::Option<ServerHelloWrite_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite {
    fn default() -> &'a ServerHelloWrite {
        <ServerHelloWrite as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ServerHelloWrite_oneof_auth {
    Anonymous(ServerHelloWrite_Anonymous),
    Reused(ServerHelloWrite_Reused),
    Accepted(ServerHelloWrite_Accepted),
}

impl ServerHelloWrite {
    pub fn new() -> ServerHelloWrite {
        ::std::default::Default::default()
    }

    // bool ttl_expired = 1;


    pub fn get_ttl_expired(&self) -> bool {
        self.ttl_expired
    }
    pub fn clear_ttl_expired(&mut self) {
        self.ttl_expired = false;
    }

    // Param is passed by value, moved
    pub fn set_ttl_expired(&mut self, v: bool) {
        self.ttl_expired = v;
    }

    // uint64 resolver_id = 2;


    pub fn get_resolver_id(&self) -> u64 {
        self.resolver_id
    }
    pub fn clear_resolver_id(&mut self) {
        self.resolver_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_resolver_id(&mut self, v: u64) {
        self.resolver_id = v;
    }

    // .ServerHelloWrite.Anonymous Anonymous = 3;


    pub fn get_Anonymous(&self) -> &ServerHelloWrite_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(ref v)) => v,
            _ => ServerHelloWrite_Anonymous::default_instance(),
        }
    }
    pub fn clear_Anonymous(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Anonymous(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Anonymous(&mut self, v: ServerHelloWrite_Anonymous) {
        self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Anonymous(&mut self) -> &mut ServerHelloWrite_Anonymous {
        if let ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(ServerHelloWrite_Anonymous::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Anonymous(&mut self) -> ServerHelloWrite_Anonymous {
        if self.has_Anonymous() {
            match self.auth.take() {
                ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerHelloWrite_Anonymous::new()
        }
    }

    // .ServerHelloWrite.Reused Reused = 4;


    pub fn get_Reused(&self) -> &ServerHelloWrite_Reused {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(ref v)) => v,
            _ => ServerHelloWrite_Reused::default_instance(),
        }
    }
    pub fn clear_Reused(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Reused(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Reused(&mut self, v: ServerHelloWrite_Reused) {
        self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Reused(&mut self) -> &mut ServerHelloWrite_Reused {
        if let ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(ServerHelloWrite_Reused::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Reused(&mut self) -> ServerHelloWrite_Reused {
        if self.has_Reused() {
            match self.auth.take() {
                ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerHelloWrite_Reused::new()
        }
    }

    // .ServerHelloWrite.Accepted Accepted = 5;


    pub fn get_Accepted(&self) -> &ServerHelloWrite_Accepted {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(ref v)) => v,
            _ => ServerHelloWrite_Accepted::default_instance(),
        }
    }
    pub fn clear_Accepted(&mut self) {
        self.auth = ::std::option::Option::None;
    }

    pub fn has_Accepted(&self) -> bool {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Accepted(&mut self, v: ServerHelloWrite_Accepted) {
        self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Accepted(&mut self) -> &mut ServerHelloWrite_Accepted {
        if let ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(_)) = self.auth {
        } else {
            self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(ServerHelloWrite_Accepted::new()));
        }
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Accepted(&mut self) -> ServerHelloWrite_Accepted {
        if self.has_Accepted() {
            match self.auth.take() {
                ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerHelloWrite_Accepted::new()
        }
    }
}

impl ::protobuf::Message for ServerHelloWrite {
    fn is_initialized(&self) -> bool {
        if let Some(ServerHelloWrite_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloWrite_oneof_auth::Reused(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloWrite_oneof_auth::Accepted(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ttl_expired = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolver_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ttl_expired != false {
            my_size += 2;
        }
        if self.resolver_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.resolver_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloWrite_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloWrite_oneof_auth::Reused(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloWrite_oneof_auth::Accepted(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ttl_expired != false {
            os.write_bool(1, self.ttl_expired)?;
        }
        if self.resolver_id != 0 {
            os.write_uint64(2, self.resolver_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloWrite_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloWrite_oneof_auth::Reused(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloWrite_oneof_auth::Accepted(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite {
        ServerHelloWrite::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "ttl_expired",
                    |m: &ServerHelloWrite| { &m.ttl_expired },
                    |m: &mut ServerHelloWrite| { &mut m.ttl_expired },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "resolver_id",
                    |m: &ServerHelloWrite| { &m.resolver_id },
                    |m: &mut ServerHelloWrite| { &mut m.resolver_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerHelloWrite_Anonymous>(
                    "Anonymous",
                    ServerHelloWrite::has_Anonymous,
                    ServerHelloWrite::get_Anonymous,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerHelloWrite_Reused>(
                    "Reused",
                    ServerHelloWrite::has_Reused,
                    ServerHelloWrite::get_Reused,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ServerHelloWrite_Accepted>(
                    "Accepted",
                    ServerHelloWrite::has_Accepted,
                    ServerHelloWrite::get_Accepted,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloWrite>(
                    "ServerHelloWrite",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloWrite {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite {
    fn clear(&mut self) {
        self.ttl_expired = false;
        self.resolver_id = 0;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloWrite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloWrite_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite_Anonymous {
    fn default() -> &'a ServerHelloWrite_Anonymous {
        <ServerHelloWrite_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloWrite_Anonymous {
    pub fn new() -> ServerHelloWrite_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloWrite_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite_Anonymous {
        ServerHelloWrite_Anonymous::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloWrite_Anonymous>(
                    "ServerHelloWrite.Anonymous",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloWrite_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloWrite_Anonymous {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloWrite_Reused {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite_Reused {
    fn default() -> &'a ServerHelloWrite_Reused {
        <ServerHelloWrite_Reused as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloWrite_Reused {
    pub fn new() -> ServerHelloWrite_Reused {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloWrite_Reused {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite_Reused {
        ServerHelloWrite_Reused::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloWrite_Reused>(
                    "ServerHelloWrite.Reused",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloWrite_Reused {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite_Reused> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite_Reused::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite_Reused {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloWrite_Reused {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite_Reused {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerHelloWrite_Accepted {
    // message fields
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite_Accepted {
    fn default() -> &'a ServerHelloWrite_Accepted {
        <ServerHelloWrite_Accepted as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloWrite_Accepted {
    pub fn new() -> ServerHelloWrite_Accepted {
        ::std::default::Default::default()
    }

    // bytes token = 1;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::bytes::Bytes) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::bytes::Bytes {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.token, ::bytes::Bytes::new())
    }
}

impl ::protobuf::Message for ServerHelloWrite_Accepted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_bytes(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite_Accepted {
        ServerHelloWrite_Accepted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                    "token",
                    |m: &ServerHelloWrite_Accepted| { &m.token },
                    |m: &mut ServerHelloWrite_Accepted| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerHelloWrite_Accepted>(
                    "ServerHelloWrite.Accepted",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerHelloWrite_Accepted {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite_Accepted> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite_Accepted::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite_Accepted {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerHelloWrite_Accepted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite_Accepted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadClientRequest {
    // message oneof groups
    pub request: ::std::option::Option<ReadClientRequest_oneof_request>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadClientRequest {
    fn default() -> &'a ReadClientRequest {
        <ReadClientRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReadClientRequest_oneof_request {
    Resolve(ReadClientRequest_Resolve),
    List(ReadClientRequest_List),
}

impl ReadClientRequest {
    pub fn new() -> ReadClientRequest {
        ::std::default::Default::default()
    }

    // .ReadClientRequest.Resolve Resolve = 1;


    pub fn get_Resolve(&self) -> &ReadClientRequest_Resolve {
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(ref v)) => v,
            _ => ReadClientRequest_Resolve::default_instance(),
        }
    }
    pub fn clear_Resolve(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_Resolve(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Resolve(&mut self, v: ReadClientRequest_Resolve) {
        self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Resolve(&mut self) -> &mut ReadClientRequest_Resolve {
        if let ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(ReadClientRequest_Resolve::new()));
        }
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Resolve(&mut self) -> ReadClientRequest_Resolve {
        if self.has_Resolve() {
            match self.request.take() {
                ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadClientRequest_Resolve::new()
        }
    }

    // .ReadClientRequest.List List = 2;


    pub fn get_List(&self) -> &ReadClientRequest_List {
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::List(ref v)) => v,
            _ => ReadClientRequest_List::default_instance(),
        }
    }
    pub fn clear_List(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_List(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::List(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_List(&mut self, v: ReadClientRequest_List) {
        self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::List(v))
    }

    // Mutable pointer to the field.
    pub fn mut_List(&mut self) -> &mut ReadClientRequest_List {
        if let ::std::option::Option::Some(ReadClientRequest_oneof_request::List(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::List(ReadClientRequest_List::new()));
        }
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::List(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_List(&mut self) -> ReadClientRequest_List {
        if self.has_List() {
            match self.request.take() {
                ::std::option::Option::Some(ReadClientRequest_oneof_request::List(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadClientRequest_List::new()
        }
    }
}

impl ::protobuf::Message for ReadClientRequest {
    fn is_initialized(&self) -> bool {
        if let Some(ReadClientRequest_oneof_request::Resolve(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadClientRequest_oneof_request::List(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::List(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &ReadClientRequest_oneof_request::Resolve(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadClientRequest_oneof_request::List(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &ReadClientRequest_oneof_request::Resolve(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadClientRequest_oneof_request::List(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadClientRequest {
        ReadClientRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReadClientRequest_Resolve>(
                    "Resolve",
                    ReadClientRequest::has_Resolve,
                    ReadClientRequest::get_Resolve,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReadClientRequest_List>(
                    "List",
                    ReadClientRequest::has_List,
                    ReadClientRequest::get_List,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadClientRequest>(
                    "ReadClientRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadClientRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadClientRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadClientRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReadClientRequest {
    fn clear(&mut self) {
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadClientRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadClientRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadClientRequest_Resolve {
    // message fields
    pub path: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadClientRequest_Resolve {
    fn default() -> &'a ReadClientRequest_Resolve {
        <ReadClientRequest_Resolve as ::protobuf::Message>::default_instance()
    }
}

impl ReadClientRequest_Resolve {
    pub fn new() -> ReadClientRequest_Resolve {
        ::std::default::Default::default()
    }

    // repeated string path = 1;


    pub fn get_path(&self) -> &[::protobuf::Chars] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<::protobuf::Chars>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<::protobuf::Chars> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<::protobuf::Chars> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReadClientRequest_Resolve {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.path {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.path {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadClientRequest_Resolve {
        ReadClientRequest_Resolve::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "path",
                    |m: &ReadClientRequest_Resolve| { &m.path },
                    |m: &mut ReadClientRequest_Resolve| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadClientRequest_Resolve>(
                    "ReadClientRequest.Resolve",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadClientRequest_Resolve {
        static mut instance: ::protobuf::lazy::Lazy<ReadClientRequest_Resolve> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadClientRequest_Resolve::new)
        }
    }
}

impl ::protobuf::Clear for ReadClientRequest_Resolve {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadClientRequest_Resolve {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadClientRequest_Resolve {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadClientRequest_List {
    // message fields
    pub path: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadClientRequest_List {
    fn default() -> &'a ReadClientRequest_List {
        <ReadClientRequest_List as ::protobuf::Message>::default_instance()
    }
}

impl ReadClientRequest_List {
    pub fn new() -> ReadClientRequest_List {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        ::protobuf::Clear::clear(&mut self.path);
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::protobuf::Chars) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::protobuf::Chars {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.path, ::protobuf::Chars::new())
    }
}

impl ::protobuf::Message for ReadClientRequest_List {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadClientRequest_List {
        ReadClientRequest_List::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "path",
                    |m: &ReadClientRequest_List| { &m.path },
                    |m: &mut ReadClientRequest_List| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadClientRequest_List>(
                    "ReadClientRequest.List",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadClientRequest_List {
        static mut instance: ::protobuf::lazy::Lazy<ReadClientRequest_List> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadClientRequest_List::new)
        }
    }
}

impl ::protobuf::Clear for ReadClientRequest_List {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.path);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadClientRequest_List {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadClientRequest_List {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadServerResponse {
    // message oneof groups
    pub response: ::std::option::Option<ReadServerResponse_oneof_response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse {
    fn default() -> &'a ReadServerResponse {
        <ReadServerResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReadServerResponse_oneof_response {
    Resolved(ReadServerResponse_Resolved),
    List(ReadServerResponse_List),
    Error(ReadServerResponse_Error),
}

impl ReadServerResponse {
    pub fn new() -> ReadServerResponse {
        ::std::default::Default::default()
    }

    // .ReadServerResponse.Resolved Resolved = 1;


    pub fn get_Resolved(&self) -> &ReadServerResponse_Resolved {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(ref v)) => v,
            _ => ReadServerResponse_Resolved::default_instance(),
        }
    }
    pub fn clear_Resolved(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_Resolved(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Resolved(&mut self, v: ReadServerResponse_Resolved) {
        self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Resolved(&mut self) -> &mut ReadServerResponse_Resolved {
        if let ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(ReadServerResponse_Resolved::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Resolved(&mut self) -> ReadServerResponse_Resolved {
        if self.has_Resolved() {
            match self.response.take() {
                ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadServerResponse_Resolved::new()
        }
    }

    // .ReadServerResponse.List List = 2;


    pub fn get_List(&self) -> &ReadServerResponse_List {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::List(ref v)) => v,
            _ => ReadServerResponse_List::default_instance(),
        }
    }
    pub fn clear_List(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_List(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::List(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_List(&mut self, v: ReadServerResponse_List) {
        self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::List(v))
    }

    // Mutable pointer to the field.
    pub fn mut_List(&mut self) -> &mut ReadServerResponse_List {
        if let ::std::option::Option::Some(ReadServerResponse_oneof_response::List(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::List(ReadServerResponse_List::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::List(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_List(&mut self) -> ReadServerResponse_List {
        if self.has_List() {
            match self.response.take() {
                ::std::option::Option::Some(ReadServerResponse_oneof_response::List(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadServerResponse_List::new()
        }
    }

    // .ReadServerResponse.Error Error = 3;


    pub fn get_Error(&self) -> &ReadServerResponse_Error {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(ref v)) => v,
            _ => ReadServerResponse_Error::default_instance(),
        }
    }
    pub fn clear_Error(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_Error(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Error(&mut self, v: ReadServerResponse_Error) {
        self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Error(&mut self) -> &mut ReadServerResponse_Error {
        if let ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(ReadServerResponse_Error::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Error(&mut self) -> ReadServerResponse_Error {
        if self.has_Error() {
            match self.response.take() {
                ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            ReadServerResponse_Error::new()
        }
    }
}

impl ::protobuf::Message for ReadServerResponse {
    fn is_initialized(&self) -> bool {
        if let Some(ReadServerResponse_oneof_response::Resolved(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadServerResponse_oneof_response::List(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadServerResponse_oneof_response::Error(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::List(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &ReadServerResponse_oneof_response::Resolved(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadServerResponse_oneof_response::List(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadServerResponse_oneof_response::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &ReadServerResponse_oneof_response::Resolved(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadServerResponse_oneof_response::List(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadServerResponse_oneof_response::Error(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse {
        ReadServerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReadServerResponse_Resolved>(
                    "Resolved",
                    ReadServerResponse::has_Resolved,
                    ReadServerResponse::get_Resolved,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReadServerResponse_List>(
                    "List",
                    ReadServerResponse::has_List,
                    ReadServerResponse::get_List,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReadServerResponse_Error>(
                    "Error",
                    ReadServerResponse::has_Error,
                    ReadServerResponse::get_Error,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadServerResponse>(
                    "ReadServerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadServerResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse {
    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadServerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadServerResponse_Krb5SpnMapping {
    // message fields
    pub addr: ::protobuf::SingularPtrField<super::shared::SocketAddr>,
    pub spn: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Krb5SpnMapping {
    fn default() -> &'a ReadServerResponse_Krb5SpnMapping {
        <ReadServerResponse_Krb5SpnMapping as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Krb5SpnMapping {
    pub fn new() -> ReadServerResponse_Krb5SpnMapping {
        ::std::default::Default::default()
    }

    // .SocketAddr addr = 1;


    pub fn get_addr(&self) -> &super::shared::SocketAddr {
        self.addr.as_ref().unwrap_or_else(|| super::shared::SocketAddr::default_instance())
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    pub fn has_addr(&self) -> bool {
        self.addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: super::shared::SocketAddr) {
        self.addr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut super::shared::SocketAddr {
        if self.addr.is_none() {
            self.addr.set_default();
        }
        self.addr.as_mut().unwrap()
    }

    // Take field
    pub fn take_addr(&mut self) -> super::shared::SocketAddr {
        self.addr.take().unwrap_or_else(|| super::shared::SocketAddr::new())
    }

    // string spn = 2;


    pub fn get_spn(&self) -> &str {
        &self.spn
    }
    pub fn clear_spn(&mut self) {
        ::protobuf::Clear::clear(&mut self.spn);
    }

    // Param is passed by value, moved
    pub fn set_spn(&mut self, v: ::protobuf::Chars) {
        self.spn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spn(&mut self) -> &mut ::protobuf::Chars {
        &mut self.spn
    }

    // Take field
    pub fn take_spn(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.spn, ::protobuf::Chars::new())
    }
}

impl ::protobuf::Message for ReadServerResponse_Krb5SpnMapping {
    fn is_initialized(&self) -> bool {
        for v in &self.addr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.spn)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.spn.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.spn);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.addr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.spn.is_empty() {
            os.write_string(2, &self.spn)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Krb5SpnMapping {
        ReadServerResponse_Krb5SpnMapping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::shared::SocketAddr>>(
                    "addr",
                    |m: &ReadServerResponse_Krb5SpnMapping| { &m.addr },
                    |m: &mut ReadServerResponse_Krb5SpnMapping| { &mut m.addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "spn",
                    |m: &ReadServerResponse_Krb5SpnMapping| { &m.spn },
                    |m: &mut ReadServerResponse_Krb5SpnMapping| { &mut m.spn },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadServerResponse_Krb5SpnMapping>(
                    "ReadServerResponse.Krb5SpnMapping",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadServerResponse_Krb5SpnMapping {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Krb5SpnMapping> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Krb5SpnMapping::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Krb5SpnMapping {
    fn clear(&mut self) {
        self.addr.clear();
        ::protobuf::Clear::clear(&mut self.spn);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadServerResponse_Krb5SpnMapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Krb5SpnMapping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadServerResponse_AddrAndAuthToken {
    // message fields
    pub addr: ::protobuf::SingularPtrField<super::shared::SocketAddr>,
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_AddrAndAuthToken {
    fn default() -> &'a ReadServerResponse_AddrAndAuthToken {
        <ReadServerResponse_AddrAndAuthToken as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_AddrAndAuthToken {
    pub fn new() -> ReadServerResponse_AddrAndAuthToken {
        ::std::default::Default::default()
    }

    // .SocketAddr addr = 1;


    pub fn get_addr(&self) -> &super::shared::SocketAddr {
        self.addr.as_ref().unwrap_or_else(|| super::shared::SocketAddr::default_instance())
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    pub fn has_addr(&self) -> bool {
        self.addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: super::shared::SocketAddr) {
        self.addr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut super::shared::SocketAddr {
        if self.addr.is_none() {
            self.addr.set_default();
        }
        self.addr.as_mut().unwrap()
    }

    // Take field
    pub fn take_addr(&mut self) -> super::shared::SocketAddr {
        self.addr.take().unwrap_or_else(|| super::shared::SocketAddr::new())
    }

    // bytes token = 2;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::bytes::Bytes) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::bytes::Bytes {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::bytes::Bytes {
        ::std::mem::replace(&mut self.token, ::bytes::Bytes::new())
    }
}

impl ::protobuf::Message for ReadServerResponse_AddrAndAuthToken {
    fn is_initialized(&self) -> bool {
        for v in &self.addr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.addr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.token.is_empty() {
            os.write_bytes(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_AddrAndAuthToken {
        ReadServerResponse_AddrAndAuthToken::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::shared::SocketAddr>>(
                    "addr",
                    |m: &ReadServerResponse_AddrAndAuthToken| { &m.addr },
                    |m: &mut ReadServerResponse_AddrAndAuthToken| { &mut m.addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheBytes>(
                    "token",
                    |m: &ReadServerResponse_AddrAndAuthToken| { &m.token },
                    |m: &mut ReadServerResponse_AddrAndAuthToken| { &mut m.token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadServerResponse_AddrAndAuthToken>(
                    "ReadServerResponse.AddrAndAuthToken",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadServerResponse_AddrAndAuthToken {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_AddrAndAuthToken> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_AddrAndAuthToken::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_AddrAndAuthToken {
    fn clear(&mut self) {
        self.addr.clear();
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadServerResponse_AddrAndAuthToken {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_AddrAndAuthToken {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadServerResponse_Resolution {
    // message fields
    pub addrs: ::protobuf::RepeatedField<ReadServerResponse_AddrAndAuthToken>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Resolution {
    fn default() -> &'a ReadServerResponse_Resolution {
        <ReadServerResponse_Resolution as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Resolution {
    pub fn new() -> ReadServerResponse_Resolution {
        ::std::default::Default::default()
    }

    // repeated .ReadServerResponse.AddrAndAuthToken addrs = 1;


    pub fn get_addrs(&self) -> &[ReadServerResponse_AddrAndAuthToken] {
        &self.addrs
    }
    pub fn clear_addrs(&mut self) {
        self.addrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_addrs(&mut self, v: ::protobuf::RepeatedField<ReadServerResponse_AddrAndAuthToken>) {
        self.addrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addrs(&mut self) -> &mut ::protobuf::RepeatedField<ReadServerResponse_AddrAndAuthToken> {
        &mut self.addrs
    }

    // Take field
    pub fn take_addrs(&mut self) -> ::protobuf::RepeatedField<ReadServerResponse_AddrAndAuthToken> {
        ::std::mem::replace(&mut self.addrs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadServerResponse_Resolution {
    fn is_initialized(&self) -> bool {
        for v in &self.addrs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.addrs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addrs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addrs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Resolution {
        ReadServerResponse_Resolution::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadServerResponse_AddrAndAuthToken>>(
                    "addrs",
                    |m: &ReadServerResponse_Resolution| { &m.addrs },
                    |m: &mut ReadServerResponse_Resolution| { &mut m.addrs },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadServerResponse_Resolution>(
                    "ReadServerResponse.Resolution",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadServerResponse_Resolution {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Resolution> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Resolution::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Resolution {
    fn clear(&mut self) {
        self.addrs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadServerResponse_Resolution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Resolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadServerResponse_Resolved {
    // message fields
    pub resolver_id: u64,
    pub krb5_spns: ::protobuf::RepeatedField<ReadServerResponse_Krb5SpnMapping>,
    pub results: ::protobuf::RepeatedField<ReadServerResponse_Resolution>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Resolved {
    fn default() -> &'a ReadServerResponse_Resolved {
        <ReadServerResponse_Resolved as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Resolved {
    pub fn new() -> ReadServerResponse_Resolved {
        ::std::default::Default::default()
    }

    // uint64 resolver_id = 1;


    pub fn get_resolver_id(&self) -> u64 {
        self.resolver_id
    }
    pub fn clear_resolver_id(&mut self) {
        self.resolver_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_resolver_id(&mut self, v: u64) {
        self.resolver_id = v;
    }

    // repeated .ReadServerResponse.Krb5SpnMapping krb5_spns = 2;


    pub fn get_krb5_spns(&self) -> &[ReadServerResponse_Krb5SpnMapping] {
        &self.krb5_spns
    }
    pub fn clear_krb5_spns(&mut self) {
        self.krb5_spns.clear();
    }

    // Param is passed by value, moved
    pub fn set_krb5_spns(&mut self, v: ::protobuf::RepeatedField<ReadServerResponse_Krb5SpnMapping>) {
        self.krb5_spns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_krb5_spns(&mut self) -> &mut ::protobuf::RepeatedField<ReadServerResponse_Krb5SpnMapping> {
        &mut self.krb5_spns
    }

    // Take field
    pub fn take_krb5_spns(&mut self) -> ::protobuf::RepeatedField<ReadServerResponse_Krb5SpnMapping> {
        ::std::mem::replace(&mut self.krb5_spns, ::protobuf::RepeatedField::new())
    }

    // repeated .ReadServerResponse.Resolution results = 3;


    pub fn get_results(&self) -> &[ReadServerResponse_Resolution] {
        &self.results
    }
    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<ReadServerResponse_Resolution>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results(&mut self) -> &mut ::protobuf::RepeatedField<ReadServerResponse_Resolution> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<ReadServerResponse_Resolution> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadServerResponse_Resolved {
    fn is_initialized(&self) -> bool {
        for v in &self.krb5_spns {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.results {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolver_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.krb5_spns)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.resolver_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.resolver_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.krb5_spns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.resolver_id != 0 {
            os.write_uint64(1, self.resolver_id)?;
        }
        for v in &self.krb5_spns {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.results {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Resolved {
        ReadServerResponse_Resolved::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "resolver_id",
                    |m: &ReadServerResponse_Resolved| { &m.resolver_id },
                    |m: &mut ReadServerResponse_Resolved| { &mut m.resolver_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadServerResponse_Krb5SpnMapping>>(
                    "krb5_spns",
                    |m: &ReadServerResponse_Resolved| { &m.krb5_spns },
                    |m: &mut ReadServerResponse_Resolved| { &mut m.krb5_spns },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadServerResponse_Resolution>>(
                    "results",
                    |m: &ReadServerResponse_Resolved| { &m.results },
                    |m: &mut ReadServerResponse_Resolved| { &mut m.results },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadServerResponse_Resolved>(
                    "ReadServerResponse.Resolved",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadServerResponse_Resolved {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Resolved> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Resolved::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Resolved {
    fn clear(&mut self) {
        self.resolver_id = 0;
        self.krb5_spns.clear();
        self.results.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadServerResponse_Resolved {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Resolved {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadServerResponse_List {
    // message fields
    pub path: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_List {
    fn default() -> &'a ReadServerResponse_List {
        <ReadServerResponse_List as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_List {
    pub fn new() -> ReadServerResponse_List {
        ::std::default::Default::default()
    }

    // repeated string path = 1;


    pub fn get_path(&self) -> &[::protobuf::Chars] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<::protobuf::Chars>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<::protobuf::Chars> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<::protobuf::Chars> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReadServerResponse_List {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.path {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.path {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_List {
        ReadServerResponse_List::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "path",
                    |m: &ReadServerResponse_List| { &m.path },
                    |m: &mut ReadServerResponse_List| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadServerResponse_List>(
                    "ReadServerResponse.List",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadServerResponse_List {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_List> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_List::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_List {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadServerResponse_List {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_List {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadServerResponse_Error {
    // message fields
    pub description: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Error {
    fn default() -> &'a ReadServerResponse_Error {
        <ReadServerResponse_Error as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Error {
    pub fn new() -> ReadServerResponse_Error {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::protobuf::Chars) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::protobuf::Chars {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.description, ::protobuf::Chars::new())
    }
}

impl ::protobuf::Message for ReadServerResponse_Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Error {
        ReadServerResponse_Error::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "description",
                    |m: &ReadServerResponse_Error| { &m.description },
                    |m: &mut ReadServerResponse_Error| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadServerResponse_Error>(
                    "ReadServerResponse.Error",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadServerResponse_Error {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Error> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Error::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Error {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadServerResponse_Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteClientRequest {
    // message oneof groups
    pub request: ::std::option::Option<WriteClientRequest_oneof_request>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest {
    fn default() -> &'a WriteClientRequest {
        <WriteClientRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum WriteClientRequest_oneof_request {
    Publish(WriteClientRequest_Publish),
    Unpublish(WriteClientRequest_Unpublish),
    Clear(WriteClientRequest_Clear),
    Heartbeat(WriteClientRequest_Heartbeat),
}

impl WriteClientRequest {
    pub fn new() -> WriteClientRequest {
        ::std::default::Default::default()
    }

    // .WriteClientRequest.Publish Publish = 1;


    pub fn get_Publish(&self) -> &WriteClientRequest_Publish {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(ref v)) => v,
            _ => WriteClientRequest_Publish::default_instance(),
        }
    }
    pub fn clear_Publish(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_Publish(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Publish(&mut self, v: WriteClientRequest_Publish) {
        self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Publish(&mut self) -> &mut WriteClientRequest_Publish {
        if let ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(WriteClientRequest_Publish::new()));
        }
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Publish(&mut self) -> WriteClientRequest_Publish {
        if self.has_Publish() {
            match self.request.take() {
                ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteClientRequest_Publish::new()
        }
    }

    // .WriteClientRequest.Unpublish Unpublish = 2;


    pub fn get_Unpublish(&self) -> &WriteClientRequest_Unpublish {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(ref v)) => v,
            _ => WriteClientRequest_Unpublish::default_instance(),
        }
    }
    pub fn clear_Unpublish(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_Unpublish(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Unpublish(&mut self, v: WriteClientRequest_Unpublish) {
        self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Unpublish(&mut self) -> &mut WriteClientRequest_Unpublish {
        if let ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(WriteClientRequest_Unpublish::new()));
        }
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Unpublish(&mut self) -> WriteClientRequest_Unpublish {
        if self.has_Unpublish() {
            match self.request.take() {
                ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteClientRequest_Unpublish::new()
        }
    }

    // .WriteClientRequest.Clear Clear = 3;


    pub fn get_Clear(&self) -> &WriteClientRequest_Clear {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(ref v)) => v,
            _ => WriteClientRequest_Clear::default_instance(),
        }
    }
    pub fn clear_Clear(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_Clear(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Clear(&mut self, v: WriteClientRequest_Clear) {
        self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Clear(&mut self) -> &mut WriteClientRequest_Clear {
        if let ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(WriteClientRequest_Clear::new()));
        }
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Clear(&mut self) -> WriteClientRequest_Clear {
        if self.has_Clear() {
            match self.request.take() {
                ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteClientRequest_Clear::new()
        }
    }

    // .WriteClientRequest.Heartbeat Heartbeat = 4;


    pub fn get_Heartbeat(&self) -> &WriteClientRequest_Heartbeat {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(ref v)) => v,
            _ => WriteClientRequest_Heartbeat::default_instance(),
        }
    }
    pub fn clear_Heartbeat(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_Heartbeat(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Heartbeat(&mut self, v: WriteClientRequest_Heartbeat) {
        self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Heartbeat(&mut self) -> &mut WriteClientRequest_Heartbeat {
        if let ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(WriteClientRequest_Heartbeat::new()));
        }
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Heartbeat(&mut self) -> WriteClientRequest_Heartbeat {
        if self.has_Heartbeat() {
            match self.request.take() {
                ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteClientRequest_Heartbeat::new()
        }
    }
}

impl ::protobuf::Message for WriteClientRequest {
    fn is_initialized(&self) -> bool {
        if let Some(WriteClientRequest_oneof_request::Publish(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteClientRequest_oneof_request::Unpublish(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteClientRequest_oneof_request::Clear(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteClientRequest_oneof_request::Heartbeat(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &WriteClientRequest_oneof_request::Publish(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteClientRequest_oneof_request::Unpublish(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteClientRequest_oneof_request::Clear(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteClientRequest_oneof_request::Heartbeat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &WriteClientRequest_oneof_request::Publish(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteClientRequest_oneof_request::Unpublish(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteClientRequest_oneof_request::Clear(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteClientRequest_oneof_request::Heartbeat(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest {
        WriteClientRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteClientRequest_Publish>(
                    "Publish",
                    WriteClientRequest::has_Publish,
                    WriteClientRequest::get_Publish,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteClientRequest_Unpublish>(
                    "Unpublish",
                    WriteClientRequest::has_Unpublish,
                    WriteClientRequest::get_Unpublish,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteClientRequest_Clear>(
                    "Clear",
                    WriteClientRequest::has_Clear,
                    WriteClientRequest::get_Clear,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteClientRequest_Heartbeat>(
                    "Heartbeat",
                    WriteClientRequest::has_Heartbeat,
                    WriteClientRequest::get_Heartbeat,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteClientRequest>(
                    "WriteClientRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteClientRequest {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest {
    fn clear(&mut self) {
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteClientRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteClientRequest_Publish {
    // message fields
    pub path: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Publish {
    fn default() -> &'a WriteClientRequest_Publish {
        <WriteClientRequest_Publish as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Publish {
    pub fn new() -> WriteClientRequest_Publish {
        ::std::default::Default::default()
    }

    // repeated string path = 1;


    pub fn get_path(&self) -> &[::protobuf::Chars] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<::protobuf::Chars>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<::protobuf::Chars> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<::protobuf::Chars> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for WriteClientRequest_Publish {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.path {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.path {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Publish {
        WriteClientRequest_Publish::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "path",
                    |m: &WriteClientRequest_Publish| { &m.path },
                    |m: &mut WriteClientRequest_Publish| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteClientRequest_Publish>(
                    "WriteClientRequest.Publish",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteClientRequest_Publish {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Publish> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Publish::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Publish {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteClientRequest_Publish {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Publish {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteClientRequest_Unpublish {
    // message fields
    pub path: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Unpublish {
    fn default() -> &'a WriteClientRequest_Unpublish {
        <WriteClientRequest_Unpublish as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Unpublish {
    pub fn new() -> WriteClientRequest_Unpublish {
        ::std::default::Default::default()
    }

    // repeated string path = 1;


    pub fn get_path(&self) -> &[::protobuf::Chars] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<::protobuf::Chars>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<::protobuf::Chars> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<::protobuf::Chars> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for WriteClientRequest_Unpublish {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.path {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.path {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Unpublish {
        WriteClientRequest_Unpublish::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "path",
                    |m: &WriteClientRequest_Unpublish| { &m.path },
                    |m: &mut WriteClientRequest_Unpublish| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteClientRequest_Unpublish>(
                    "WriteClientRequest.Unpublish",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteClientRequest_Unpublish {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Unpublish> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Unpublish::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Unpublish {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteClientRequest_Unpublish {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Unpublish {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteClientRequest_Clear {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Clear {
    fn default() -> &'a WriteClientRequest_Clear {
        <WriteClientRequest_Clear as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Clear {
    pub fn new() -> WriteClientRequest_Clear {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteClientRequest_Clear {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Clear {
        WriteClientRequest_Clear::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteClientRequest_Clear>(
                    "WriteClientRequest.Clear",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteClientRequest_Clear {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Clear> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Clear::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Clear {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteClientRequest_Clear {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Clear {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteClientRequest_Heartbeat {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Heartbeat {
    fn default() -> &'a WriteClientRequest_Heartbeat {
        <WriteClientRequest_Heartbeat as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Heartbeat {
    pub fn new() -> WriteClientRequest_Heartbeat {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteClientRequest_Heartbeat {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Heartbeat {
        WriteClientRequest_Heartbeat::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteClientRequest_Heartbeat>(
                    "WriteClientRequest.Heartbeat",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteClientRequest_Heartbeat {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Heartbeat> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Heartbeat::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Heartbeat {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteClientRequest_Heartbeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Heartbeat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteServerResponse {
    // message oneof groups
    pub response: ::std::option::Option<WriteServerResponse_oneof_response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse {
    fn default() -> &'a WriteServerResponse {
        <WriteServerResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum WriteServerResponse_oneof_response {
    Published(WriteServerResponse_Published),
    Unpublished(WriteServerResponse_Unpublished),
    Error(WriteServerResponse_Error),
}

impl WriteServerResponse {
    pub fn new() -> WriteServerResponse {
        ::std::default::Default::default()
    }

    // .WriteServerResponse.Published Published = 1;


    pub fn get_Published(&self) -> &WriteServerResponse_Published {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(ref v)) => v,
            _ => WriteServerResponse_Published::default_instance(),
        }
    }
    pub fn clear_Published(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_Published(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Published(&mut self, v: WriteServerResponse_Published) {
        self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Published(&mut self) -> &mut WriteServerResponse_Published {
        if let ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(WriteServerResponse_Published::new()));
        }
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Published(&mut self) -> WriteServerResponse_Published {
        if self.has_Published() {
            match self.response.take() {
                ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteServerResponse_Published::new()
        }
    }

    // .WriteServerResponse.Unpublished Unpublished = 2;


    pub fn get_Unpublished(&self) -> &WriteServerResponse_Unpublished {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(ref v)) => v,
            _ => WriteServerResponse_Unpublished::default_instance(),
        }
    }
    pub fn clear_Unpublished(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_Unpublished(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Unpublished(&mut self, v: WriteServerResponse_Unpublished) {
        self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Unpublished(&mut self) -> &mut WriteServerResponse_Unpublished {
        if let ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(WriteServerResponse_Unpublished::new()));
        }
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Unpublished(&mut self) -> WriteServerResponse_Unpublished {
        if self.has_Unpublished() {
            match self.response.take() {
                ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteServerResponse_Unpublished::new()
        }
    }

    // .WriteServerResponse.Error Error = 3;


    pub fn get_Error(&self) -> &WriteServerResponse_Error {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(ref v)) => v,
            _ => WriteServerResponse_Error::default_instance(),
        }
    }
    pub fn clear_Error(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_Error(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Error(&mut self, v: WriteServerResponse_Error) {
        self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Error(&mut self) -> &mut WriteServerResponse_Error {
        if let ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(WriteServerResponse_Error::new()));
        }
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Error(&mut self) -> WriteServerResponse_Error {
        if self.has_Error() {
            match self.response.take() {
                ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            WriteServerResponse_Error::new()
        }
    }
}

impl ::protobuf::Message for WriteServerResponse {
    fn is_initialized(&self) -> bool {
        if let Some(WriteServerResponse_oneof_response::Published(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteServerResponse_oneof_response::Unpublished(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteServerResponse_oneof_response::Error(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &WriteServerResponse_oneof_response::Published(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteServerResponse_oneof_response::Unpublished(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteServerResponse_oneof_response::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &WriteServerResponse_oneof_response::Published(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteServerResponse_oneof_response::Unpublished(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteServerResponse_oneof_response::Error(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse {
        WriteServerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteServerResponse_Published>(
                    "Published",
                    WriteServerResponse::has_Published,
                    WriteServerResponse::get_Published,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteServerResponse_Unpublished>(
                    "Unpublished",
                    WriteServerResponse::has_Unpublished,
                    WriteServerResponse::get_Unpublished,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WriteServerResponse_Error>(
                    "Error",
                    WriteServerResponse::has_Error,
                    WriteServerResponse::get_Error,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteServerResponse>(
                    "WriteServerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteServerResponse {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse {
    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteServerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteServerResponse_Published {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse_Published {
    fn default() -> &'a WriteServerResponse_Published {
        <WriteServerResponse_Published as ::protobuf::Message>::default_instance()
    }
}

impl WriteServerResponse_Published {
    pub fn new() -> WriteServerResponse_Published {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteServerResponse_Published {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse_Published {
        WriteServerResponse_Published::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteServerResponse_Published>(
                    "WriteServerResponse.Published",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteServerResponse_Published {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse_Published> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse_Published::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse_Published {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteServerResponse_Published {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse_Published {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteServerResponse_Unpublished {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse_Unpublished {
    fn default() -> &'a WriteServerResponse_Unpublished {
        <WriteServerResponse_Unpublished as ::protobuf::Message>::default_instance()
    }
}

impl WriteServerResponse_Unpublished {
    pub fn new() -> WriteServerResponse_Unpublished {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteServerResponse_Unpublished {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse_Unpublished {
        WriteServerResponse_Unpublished::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteServerResponse_Unpublished>(
                    "WriteServerResponse.Unpublished",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteServerResponse_Unpublished {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse_Unpublished> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse_Unpublished::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse_Unpublished {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteServerResponse_Unpublished {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse_Unpublished {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteServerResponse_Error {
    // message fields
    pub description: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse_Error {
    fn default() -> &'a WriteServerResponse_Error {
        <WriteServerResponse_Error as ::protobuf::Message>::default_instance()
    }
}

impl WriteServerResponse_Error {
    pub fn new() -> WriteServerResponse_Error {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::protobuf::Chars) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::protobuf::Chars {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.description, ::protobuf::Chars::new())
    }
}

impl ::protobuf::Message for WriteServerResponse_Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse_Error {
        WriteServerResponse_Error::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "description",
                    |m: &WriteServerResponse_Error| { &m.description },
                    |m: &mut WriteServerResponse_Error| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteServerResponse_Error>(
                    "WriteServerResponse.Error",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteServerResponse_Error {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse_Error> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse_Error::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse_Error {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteServerResponse_Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eresolver.proto\x12\0\"\xb7\x05\n\x0bClientHello\x12'\n\x08ReadOnly\
    \x18\x01\x20\x01(\x0b2\x11.ClientHello.ReadH\0B\0\x12)\n\tWriteOnly\x18\
    \x02\x20\x01(\x0b2\x12.ClientHello.WriteH\0B\0\x1a\xf1\x01\n\x04Read\x12\
    2\n\tAnonymous\x18\x01\x20\x01(\x0b2\x1b.ClientHello.Read.AnonymousH\0B\
    \0\x12*\n\x05Reuse\x18\x02\x20\x01(\x0b2\x17.ClientHello.Read.ReuseH\0B\
    \0\x120\n\x08Initiate\x18\x03\x20\x01(\x0b2\x1a.ClientHello.Read.Initiat\
    eH\0B\0\x1a\r\n\tAnonymous:\0\x1a\x1f\n\x05Reuse\x12\x14\n\nsession_id\
    \x18\x01\x20\x01(\x04B\0:\0\x1a\x1d\n\x08Initiate\x12\x0f\n\x05token\x18\
    \x01\x20\x01(\x0cB\0:\0B\x06\n\x04auth:\0\x1a\xd4\x02\n\x05Write\x12!\n\
    \nwrite_addr\x18\x01\x20\x01(\x0b2\x0b.SocketAddrB\0\x12'\n\x04auth\x18\
    \x02\x20\x01(\x0b2\x17.ClientHello.Write.AuthB\0\x1a\xfc\x01\n\x04Auth\
    \x128\n\tAnonymous\x18\x01\x20\x01(\x0b2!.ClientHello.Write.Auth.Anonymo\
    usH\0B\0\x120\n\x05Reuse\x18\x02\x20\x01(\x0b2\x1d.ClientHello.Write.Aut\
    h.ReuseH\0B\0\x126\n\x08Initiate\x18\x03\x20\x01(\x0b2\x20.ClientHello.W\
    rite.Auth.InitiateH\0B\0\x1a\r\n\tAnonymous:\0\x1a\t\n\x05Reuse:\0\x1a,\
    \n\x08Initiate\x12\r\n\x03spn\x18\x01\x20\x01(\tB\0\x12\x0f\n\x05token\
    \x18\x02\x20\x01(\x0cB\0:\0B\x06\n\x04auth:\0:\0B\x07\n\x05hello:\0\"\
    \xfc\x01\n\x0fServerHelloRead\x121\n\tAnonymous\x18\x01\x20\x01(\x0b2\
    \x1a.ServerHelloRead.AnonymousH\0B\0\x12+\n\x06Reused\x18\x02\x20\x01(\
    \x0b2\x17.ServerHelloRead.ReusedH\0B\0\x12/\n\x08Accepted\x18\x03\x20\
    \x01(\x0b2\x19.ServerHelloRead.AcceptedH\0B\0\x1a\r\n\tAnonymous:\0\x1a\
    \n\n\x06Reused:\0\x1a3\n\x08Accepted\x12\x14\n\ncontext_id\x18\x01\x20\
    \x01(\x04B\0\x12\x0f\n\x05token\x18\x02\x20\x01(\x0cB\0:\0B\x06\n\x04aut\
    h:\0\"\x98\x02\n\x10ServerHelloWrite\x12\x15\n\x0bttl_expired\x18\x01\
    \x20\x01(\x08B\0\x12\x15\n\x0bresolver_id\x18\x02\x20\x01(\x04B\0\x122\n\
    \tAnonymous\x18\x03\x20\x01(\x0b2\x1b.ServerHelloWrite.AnonymousH\0B\0\
    \x12,\n\x06Reused\x18\x04\x20\x01(\x0b2\x18.ServerHelloWrite.ReusedH\0B\
    \0\x120\n\x08Accepted\x18\x05\x20\x01(\x0b2\x1a.ServerHelloWrite.Accepte\
    dH\0B\0\x1a\r\n\tAnonymous:\0\x1a\n\n\x06Reused:\0\x1a\x1d\n\x08Accepted\
    \x12\x0f\n\x05token\x18\x01\x20\x01(\x0cB\0:\0B\x06\n\x04auth:\0\"\xb3\
    \x01\n\x11ReadClientRequest\x12/\n\x07Resolve\x18\x01\x20\x01(\x0b2\x1a.\
    ReadClientRequest.ResolveH\0B\0\x12)\n\x04List\x18\x02\x20\x01(\x0b2\x17\
    .ReadClientRequest.ListH\0B\0\x1a\x1b\n\x07Resolve\x12\x0e\n\x04path\x18\
    \x01\x20\x03(\tB\0:\0\x1a\x18\n\x04List\x12\x0e\n\x04path\x18\x01\x20\
    \x01(\tB\0:\0B\t\n\x07request:\0\"\xc9\x04\n\x12ReadServerResponse\x122\
    \n\x08Resolved\x18\x01\x20\x01(\x0b2\x1c.ReadServerResponse.ResolvedH\0B\
    \0\x12*\n\x04List\x18\x02\x20\x01(\x0b2\x18.ReadServerResponse.ListH\0B\
    \0\x12,\n\x05Error\x18\x03\x20\x01(\x0b2\x19.ReadServerResponse.ErrorH\0\
    B\0\x1a>\n\x0eKrb5SpnMapping\x12\x1b\n\x04addr\x18\x01\x20\x01(\x0b2\x0b\
    .SocketAddrB\0\x12\r\n\x03spn\x18\x02\x20\x01(\tB\0:\0\x1aB\n\x10AddrAnd\
    AuthToken\x12\x1b\n\x04addr\x18\x01\x20\x01(\x0b2\x0b.SocketAddrB\0\x12\
    \x0f\n\x05token\x18\x02\x20\x01(\x0cB\0:\0\x1aE\n\nResolution\x125\n\x05\
    addrs\x18\x01\x20\x03(\x0b2$.ReadServerResponse.AddrAndAuthTokenB\0:\0\
    \x1a\x8f\x01\n\x08Resolved\x12\x15\n\x0bresolver_id\x18\x01\x20\x01(\x04\
    B\0\x127\n\tkrb5_spns\x18\x02\x20\x03(\x0b2\".ReadServerResponse.Krb5Spn\
    MappingB\0\x121\n\x07results\x18\x03\x20\x03(\x0b2\x1e.ReadServerRespons\
    e.ResolutionB\0:\0\x1a\x18\n\x04List\x12\x0e\n\x04path\x18\x01\x20\x03(\
    \tB\0:\0\x1a\x20\n\x05Error\x12\x15\n\x0bdescription\x18\x01\x20\x01(\tB\
    \0:\0B\n\n\x08response:\0\"\xc3\x02\n\x12WriteClientRequest\x120\n\x07Pu\
    blish\x18\x01\x20\x01(\x0b2\x1b.WriteClientRequest.PublishH\0B\0\x124\n\
    \tUnpublish\x18\x02\x20\x01(\x0b2\x1d.WriteClientRequest.UnpublishH\0B\0\
    \x12,\n\x05Clear\x18\x03\x20\x01(\x0b2\x19.WriteClientRequest.ClearH\0B\
    \0\x124\n\tHeartbeat\x18\x04\x20\x01(\x0b2\x1d.WriteClientRequest.Heartb\
    eatH\0B\0\x1a\x1b\n\x07Publish\x12\x0e\n\x04path\x18\x01\x20\x03(\tB\0:\
    \0\x1a\x1d\n\tUnpublish\x12\x0e\n\x04path\x18\x01\x20\x03(\tB\0:\0\x1a\t\
    \n\x05Clear:\0\x1a\r\n\tHeartbeat:\0B\t\n\x07request:\0\"\x86\x02\n\x13W\
    riteServerResponse\x125\n\tPublished\x18\x01\x20\x01(\x0b2\x1e.WriteServ\
    erResponse.PublishedH\0B\0\x129\n\x0bUnpublished\x18\x02\x20\x01(\x0b2\
    \x20.WriteServerResponse.UnpublishedH\0B\0\x12-\n\x05Error\x18\x03\x20\
    \x01(\x0b2\x1a.WriteServerResponse.ErrorH\0B\0\x1a\r\n\tPublished:\0\x1a\
    \x0f\n\x0bUnpublished:\0\x1a\x20\n\x05Error\x12\x15\n\x0bdescription\x18\
    \x01\x20\x01(\tB\0:\0B\n\n\x08response:\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
