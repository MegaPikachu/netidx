// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `resolver.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello {
    // message oneof groups
    pub hello: ::std::option::Option<ClientHello_oneof_hello>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello {
    fn default() -> &'a ClientHello {
        <ClientHello as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientHello_oneof_hello {
    ReadOnly(ClientHello_Read),
    WriteOnly(ClientHello_Write),
}

impl ClientHello {
    pub fn new() -> ClientHello {
        ::std::default::Default::default()
    }

    // .ClientHello.Read ReadOnly = 1;


    pub fn get_ReadOnly(&self) -> &ClientHello_Read {
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(ref v)) => v,
            _ => ClientHello_Read::default_instance(),
        }
    }

    // .ClientHello.Write WriteOnly = 2;


    pub fn get_WriteOnly(&self) -> &ClientHello_Write {
        match self.hello {
            ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(ref v)) => v,
            _ => ClientHello_Write::default_instance(),
        }
    }
}

impl ::protobuf::Message for ClientHello {
    fn is_initialized(&self) -> bool {
        if let Some(ClientHello_oneof_hello::ReadOnly(ref v)) = self.hello {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_oneof_hello::WriteOnly(ref v)) = self.hello {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::ReadOnly(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hello = ::std::option::Option::Some(ClientHello_oneof_hello::WriteOnly(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.hello {
            match v {
                &ClientHello_oneof_hello::ReadOnly(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_oneof_hello::WriteOnly(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.hello {
            match v {
                &ClientHello_oneof_hello::ReadOnly(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_oneof_hello::WriteOnly(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello {
        ClientHello::new()
    }

    fn default_instance() -> &'static ClientHello {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello {
    fn clear(&mut self) {
        self.hello = ::std::option::Option::None;
        self.hello = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Read {
    // message oneof groups
    pub auth: ::std::option::Option<ClientHello_Read_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read {
    fn default() -> &'a ClientHello_Read {
        <ClientHello_Read as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientHello_Read_oneof_auth {
    Anonymous(ClientHello_Read_Anonymous),
    Reuse(ClientHello_Read_Reuse),
    Initiate(ClientHello_Read_Initiate),
}

impl ClientHello_Read {
    pub fn new() -> ClientHello_Read {
        ::std::default::Default::default()
    }

    // .ClientHello.Read.Anonymous Anonymous = 1;


    pub fn get_Anonymous(&self) -> &ClientHello_Read_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(ref v)) => v,
            _ => ClientHello_Read_Anonymous::default_instance(),
        }
    }

    // .ClientHello.Read.Reuse Reuse = 2;


    pub fn get_Reuse(&self) -> &ClientHello_Read_Reuse {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(ref v)) => v,
            _ => ClientHello_Read_Reuse::default_instance(),
        }
    }

    // .ClientHello.Read.Initiate Initiate = 3;


    pub fn get_Initiate(&self) -> &ClientHello_Read_Initiate {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(ref v)) => v,
            _ => ClientHello_Read_Initiate::default_instance(),
        }
    }
}

impl ::protobuf::Message for ClientHello_Read {
    fn is_initialized(&self) -> bool {
        if let Some(ClientHello_Read_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Read_oneof_auth::Reuse(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Read_oneof_auth::Initiate(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Anonymous(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Reuse(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Read_oneof_auth::Initiate(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Read_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Read_oneof_auth::Reuse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Read_oneof_auth::Initiate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Read_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Read_oneof_auth::Reuse(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Read_oneof_auth::Initiate(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read {
        ClientHello_Read::new()
    }

    fn default_instance() -> &'static ClientHello_Read {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read {
    fn clear(&mut self) {
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Read_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read_Anonymous {
    fn default() -> &'a ClientHello_Read_Anonymous {
        <ClientHello_Read_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Read_Anonymous {
    pub fn new() -> ClientHello_Read_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientHello_Read_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read_Anonymous {
        ClientHello_Read_Anonymous::new()
    }

    fn default_instance() -> &'static ClientHello_Read_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Read_Reuse {
    // message fields
    pub session_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read_Reuse {
    fn default() -> &'a ClientHello_Read_Reuse {
        <ClientHello_Read_Reuse as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Read_Reuse {
    pub fn new() -> ClientHello_Read_Reuse {
        ::std::default::Default::default()
    }

    // uint64 session_id = 1;


    pub fn get_session_id(&self) -> u64 {
        self.session_id
    }
}

impl ::protobuf::Message for ClientHello_Read_Reuse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.session_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.session_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_id != 0 {
            os.write_uint64(1, self.session_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read_Reuse {
        ClientHello_Read_Reuse::new()
    }

    fn default_instance() -> &'static ClientHello_Read_Reuse {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read_Reuse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read_Reuse::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read_Reuse {
    fn clear(&mut self) {
        self.session_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read_Reuse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Read_Initiate {
    // message fields
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Read_Initiate {
    fn default() -> &'a ClientHello_Read_Initiate {
        <ClientHello_Read_Initiate as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Read_Initiate {
    pub fn new() -> ClientHello_Read_Initiate {
        ::std::default::Default::default()
    }

    // bytes token = 1;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
}

impl ::protobuf::Message for ClientHello_Read_Initiate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_bytes(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Read_Initiate {
        ClientHello_Read_Initiate::new()
    }

    fn default_instance() -> &'static ClientHello_Read_Initiate {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Read_Initiate> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Read_Initiate::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Read_Initiate {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Read_Initiate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Write {
    // message fields
    pub write_addr: ::protobuf::SingularPtrField<super::shared::SocketAddr>,
    pub auth: ::protobuf::SingularPtrField<ClientHello_Write_Auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write {
    fn default() -> &'a ClientHello_Write {
        <ClientHello_Write as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write {
    pub fn new() -> ClientHello_Write {
        ::std::default::Default::default()
    }

    // .SocketAddr write_addr = 1;


    pub fn get_write_addr(&self) -> &super::shared::SocketAddr {
        self.write_addr.as_ref().unwrap_or_else(|| super::shared::SocketAddr::default_instance())
    }

    // .ClientHello.Write.Auth auth = 2;


    pub fn get_auth(&self) -> &ClientHello_Write_Auth {
        self.auth.as_ref().unwrap_or_else(|| ClientHello_Write_Auth::default_instance())
    }
}

impl ::protobuf::Message for ClientHello_Write {
    fn is_initialized(&self) -> bool {
        for v in &self.write_addr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.auth {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.write_addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.auth)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.write_addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.auth.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.write_addr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.auth.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write {
        ClientHello_Write::new()
    }

    fn default_instance() -> &'static ClientHello_Write {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write {
    fn clear(&mut self) {
        self.write_addr.clear();
        self.auth.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Write_Auth {
    // message oneof groups
    pub auth: ::std::option::Option<ClientHello_Write_Auth_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth {
    fn default() -> &'a ClientHello_Write_Auth {
        <ClientHello_Write_Auth as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientHello_Write_Auth_oneof_auth {
    Anonymous(ClientHello_Write_Auth_Anonymous),
    Reuse(ClientHello_Write_Auth_Reuse),
    Initiate(ClientHello_Write_Auth_Initiate),
}

impl ClientHello_Write_Auth {
    pub fn new() -> ClientHello_Write_Auth {
        ::std::default::Default::default()
    }

    // .ClientHello.Write.Auth.Anonymous Anonymous = 1;


    pub fn get_Anonymous(&self) -> &ClientHello_Write_Auth_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(ref v)) => v,
            _ => ClientHello_Write_Auth_Anonymous::default_instance(),
        }
    }

    // .ClientHello.Write.Auth.Reuse Reuse = 2;


    pub fn get_Reuse(&self) -> &ClientHello_Write_Auth_Reuse {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(ref v)) => v,
            _ => ClientHello_Write_Auth_Reuse::default_instance(),
        }
    }

    // .ClientHello.Write.Auth.Initiate Initiate = 3;


    pub fn get_Initiate(&self) -> &ClientHello_Write_Auth_Initiate {
        match self.auth {
            ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(ref v)) => v,
            _ => ClientHello_Write_Auth_Initiate::default_instance(),
        }
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth {
    fn is_initialized(&self) -> bool {
        if let Some(ClientHello_Write_Auth_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Write_Auth_oneof_auth::Reuse(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ClientHello_Write_Auth_oneof_auth::Initiate(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Anonymous(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Reuse(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ClientHello_Write_Auth_oneof_auth::Initiate(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Write_Auth_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Write_Auth_oneof_auth::Reuse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ClientHello_Write_Auth_oneof_auth::Initiate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ClientHello_Write_Auth_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Write_Auth_oneof_auth::Reuse(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ClientHello_Write_Auth_oneof_auth::Initiate(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth {
        ClientHello_Write_Auth::new()
    }

    fn default_instance() -> &'static ClientHello_Write_Auth {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth {
    fn clear(&mut self) {
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Write_Auth_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth_Anonymous {
    fn default() -> &'a ClientHello_Write_Auth_Anonymous {
        <ClientHello_Write_Auth_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write_Auth_Anonymous {
    pub fn new() -> ClientHello_Write_Auth_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth_Anonymous {
        ClientHello_Write_Auth_Anonymous::new()
    }

    fn default_instance() -> &'static ClientHello_Write_Auth_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Write_Auth_Reuse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth_Reuse {
    fn default() -> &'a ClientHello_Write_Auth_Reuse {
        <ClientHello_Write_Auth_Reuse as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write_Auth_Reuse {
    pub fn new() -> ClientHello_Write_Auth_Reuse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth_Reuse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth_Reuse {
        ClientHello_Write_Auth_Reuse::new()
    }

    fn default_instance() -> &'static ClientHello_Write_Auth_Reuse {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth_Reuse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth_Reuse::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth_Reuse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth_Reuse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientHello_Write_Auth_Initiate {
    // message fields
    pub spn: ::protobuf::Chars,
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientHello_Write_Auth_Initiate {
    fn default() -> &'a ClientHello_Write_Auth_Initiate {
        <ClientHello_Write_Auth_Initiate as ::protobuf::Message>::default_instance()
    }
}

impl ClientHello_Write_Auth_Initiate {
    pub fn new() -> ClientHello_Write_Auth_Initiate {
        ::std::default::Default::default()
    }

    // string spn = 1;


    pub fn get_spn(&self) -> &str {
        &self.spn
    }

    // bytes token = 2;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
}

impl ::protobuf::Message for ClientHello_Write_Auth_Initiate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.spn)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.spn.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.spn);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.spn.is_empty() {
            os.write_string(1, &self.spn)?;
        }
        if !self.token.is_empty() {
            os.write_bytes(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientHello_Write_Auth_Initiate {
        ClientHello_Write_Auth_Initiate::new()
    }

    fn default_instance() -> &'static ClientHello_Write_Auth_Initiate {
        static mut instance: ::protobuf::lazy::Lazy<ClientHello_Write_Auth_Initiate> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ClientHello_Write_Auth_Initiate::new)
        }
    }
}

impl ::protobuf::Clear for ClientHello_Write_Auth_Initiate {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.spn);
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientHello_Write_Auth_Initiate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloRead {
    // message oneof groups
    pub auth: ::std::option::Option<ServerHelloRead_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead {
    fn default() -> &'a ServerHelloRead {
        <ServerHelloRead as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ServerHelloRead_oneof_auth {
    Anonymous(ServerHelloRead_Anonymous),
    Reused(ServerHelloRead_Reused),
    Accepted(ServerHelloRead_Accepted),
}

impl ServerHelloRead {
    pub fn new() -> ServerHelloRead {
        ::std::default::Default::default()
    }

    // .ServerHelloRead.Anonymous Anonymous = 1;


    pub fn get_Anonymous(&self) -> &ServerHelloRead_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(ref v)) => v,
            _ => ServerHelloRead_Anonymous::default_instance(),
        }
    }

    // .ServerHelloRead.Reused Reused = 2;


    pub fn get_Reused(&self) -> &ServerHelloRead_Reused {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(ref v)) => v,
            _ => ServerHelloRead_Reused::default_instance(),
        }
    }

    // .ServerHelloRead.Accepted Accepted = 3;


    pub fn get_Accepted(&self) -> &ServerHelloRead_Accepted {
        match self.auth {
            ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(ref v)) => v,
            _ => ServerHelloRead_Accepted::default_instance(),
        }
    }
}

impl ::protobuf::Message for ServerHelloRead {
    fn is_initialized(&self) -> bool {
        if let Some(ServerHelloRead_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloRead_oneof_auth::Reused(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloRead_oneof_auth::Accepted(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Anonymous(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Reused(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloRead_oneof_auth::Accepted(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloRead_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloRead_oneof_auth::Reused(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloRead_oneof_auth::Accepted(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloRead_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloRead_oneof_auth::Reused(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloRead_oneof_auth::Accepted(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead {
        ServerHelloRead::new()
    }

    fn default_instance() -> &'static ServerHelloRead {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead {
    fn clear(&mut self) {
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloRead_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead_Anonymous {
    fn default() -> &'a ServerHelloRead_Anonymous {
        <ServerHelloRead_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloRead_Anonymous {
    pub fn new() -> ServerHelloRead_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloRead_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead_Anonymous {
        ServerHelloRead_Anonymous::new()
    }

    fn default_instance() -> &'static ServerHelloRead_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloRead_Reused {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead_Reused {
    fn default() -> &'a ServerHelloRead_Reused {
        <ServerHelloRead_Reused as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloRead_Reused {
    pub fn new() -> ServerHelloRead_Reused {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloRead_Reused {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead_Reused {
        ServerHelloRead_Reused::new()
    }

    fn default_instance() -> &'static ServerHelloRead_Reused {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead_Reused> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead_Reused::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead_Reused {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead_Reused {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloRead_Accepted {
    // message fields
    pub context_id: u64,
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloRead_Accepted {
    fn default() -> &'a ServerHelloRead_Accepted {
        <ServerHelloRead_Accepted as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloRead_Accepted {
    pub fn new() -> ServerHelloRead_Accepted {
        ::std::default::Default::default()
    }

    // uint64 context_id = 1;


    pub fn get_context_id(&self) -> u64 {
        self.context_id
    }

    // bytes token = 2;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
}

impl ::protobuf::Message for ServerHelloRead_Accepted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.context_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.context_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.context_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.context_id != 0 {
            os.write_uint64(1, self.context_id)?;
        }
        if !self.token.is_empty() {
            os.write_bytes(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloRead_Accepted {
        ServerHelloRead_Accepted::new()
    }

    fn default_instance() -> &'static ServerHelloRead_Accepted {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloRead_Accepted> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloRead_Accepted::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloRead_Accepted {
    fn clear(&mut self) {
        self.context_id = 0;
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloRead_Accepted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloWrite {
    // message fields
    pub ttl_expired: bool,
    pub resolver_id: u64,
    // message oneof groups
    pub auth: ::std::option::Option<ServerHelloWrite_oneof_auth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite {
    fn default() -> &'a ServerHelloWrite {
        <ServerHelloWrite as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ServerHelloWrite_oneof_auth {
    Anonymous(ServerHelloWrite_Anonymous),
    Reused(ServerHelloWrite_Reused),
    Accepted(ServerHelloWrite_Accepted),
}

impl ServerHelloWrite {
    pub fn new() -> ServerHelloWrite {
        ::std::default::Default::default()
    }

    // bool ttl_expired = 1;


    pub fn get_ttl_expired(&self) -> bool {
        self.ttl_expired
    }

    // uint64 resolver_id = 2;


    pub fn get_resolver_id(&self) -> u64 {
        self.resolver_id
    }

    // .ServerHelloWrite.Anonymous Anonymous = 3;


    pub fn get_Anonymous(&self) -> &ServerHelloWrite_Anonymous {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(ref v)) => v,
            _ => ServerHelloWrite_Anonymous::default_instance(),
        }
    }

    // .ServerHelloWrite.Reused Reused = 4;


    pub fn get_Reused(&self) -> &ServerHelloWrite_Reused {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(ref v)) => v,
            _ => ServerHelloWrite_Reused::default_instance(),
        }
    }

    // .ServerHelloWrite.Accepted Accepted = 5;


    pub fn get_Accepted(&self) -> &ServerHelloWrite_Accepted {
        match self.auth {
            ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(ref v)) => v,
            _ => ServerHelloWrite_Accepted::default_instance(),
        }
    }
}

impl ::protobuf::Message for ServerHelloWrite {
    fn is_initialized(&self) -> bool {
        if let Some(ServerHelloWrite_oneof_auth::Anonymous(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloWrite_oneof_auth::Reused(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ServerHelloWrite_oneof_auth::Accepted(ref v)) = self.auth {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ttl_expired = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolver_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Anonymous(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Reused(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auth = ::std::option::Option::Some(ServerHelloWrite_oneof_auth::Accepted(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ttl_expired != false {
            my_size += 2;
        }
        if self.resolver_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.resolver_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloWrite_oneof_auth::Anonymous(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloWrite_oneof_auth::Reused(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ServerHelloWrite_oneof_auth::Accepted(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ttl_expired != false {
            os.write_bool(1, self.ttl_expired)?;
        }
        if self.resolver_id != 0 {
            os.write_uint64(2, self.resolver_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.auth {
            match v {
                &ServerHelloWrite_oneof_auth::Anonymous(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloWrite_oneof_auth::Reused(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ServerHelloWrite_oneof_auth::Accepted(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite {
        ServerHelloWrite::new()
    }

    fn default_instance() -> &'static ServerHelloWrite {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite {
    fn clear(&mut self) {
        self.ttl_expired = false;
        self.resolver_id = 0;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.auth = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloWrite_Anonymous {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite_Anonymous {
    fn default() -> &'a ServerHelloWrite_Anonymous {
        <ServerHelloWrite_Anonymous as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloWrite_Anonymous {
    pub fn new() -> ServerHelloWrite_Anonymous {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloWrite_Anonymous {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite_Anonymous {
        ServerHelloWrite_Anonymous::new()
    }

    fn default_instance() -> &'static ServerHelloWrite_Anonymous {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite_Anonymous> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite_Anonymous::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite_Anonymous {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite_Anonymous {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloWrite_Reused {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite_Reused {
    fn default() -> &'a ServerHelloWrite_Reused {
        <ServerHelloWrite_Reused as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloWrite_Reused {
    pub fn new() -> ServerHelloWrite_Reused {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ServerHelloWrite_Reused {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite_Reused {
        ServerHelloWrite_Reused::new()
    }

    fn default_instance() -> &'static ServerHelloWrite_Reused {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite_Reused> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite_Reused::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite_Reused {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite_Reused {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerHelloWrite_Accepted {
    // message fields
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerHelloWrite_Accepted {
    fn default() -> &'a ServerHelloWrite_Accepted {
        <ServerHelloWrite_Accepted as ::protobuf::Message>::default_instance()
    }
}

impl ServerHelloWrite_Accepted {
    pub fn new() -> ServerHelloWrite_Accepted {
        ::std::default::Default::default()
    }

    // bytes token = 1;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
}

impl ::protobuf::Message for ServerHelloWrite_Accepted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_bytes(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerHelloWrite_Accepted {
        ServerHelloWrite_Accepted::new()
    }

    fn default_instance() -> &'static ServerHelloWrite_Accepted {
        static mut instance: ::protobuf::lazy::Lazy<ServerHelloWrite_Accepted> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ServerHelloWrite_Accepted::new)
        }
    }
}

impl ::protobuf::Clear for ServerHelloWrite_Accepted {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerHelloWrite_Accepted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadClientRequest {
    // message oneof groups
    pub request: ::std::option::Option<ReadClientRequest_oneof_request>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadClientRequest {
    fn default() -> &'a ReadClientRequest {
        <ReadClientRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReadClientRequest_oneof_request {
    Resolve(ReadClientRequest_Resolve),
    List(ReadClientRequest_List),
}

impl ReadClientRequest {
    pub fn new() -> ReadClientRequest {
        ::std::default::Default::default()
    }

    // .ReadClientRequest.Resolve Resolve = 1;


    pub fn get_Resolve(&self) -> &ReadClientRequest_Resolve {
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(ref v)) => v,
            _ => ReadClientRequest_Resolve::default_instance(),
        }
    }

    // .ReadClientRequest.List List = 2;


    pub fn get_List(&self) -> &ReadClientRequest_List {
        match self.request {
            ::std::option::Option::Some(ReadClientRequest_oneof_request::List(ref v)) => v,
            _ => ReadClientRequest_List::default_instance(),
        }
    }
}

impl ::protobuf::Message for ReadClientRequest {
    fn is_initialized(&self) -> bool {
        if let Some(ReadClientRequest_oneof_request::Resolve(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadClientRequest_oneof_request::List(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::Resolve(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(ReadClientRequest_oneof_request::List(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &ReadClientRequest_oneof_request::Resolve(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadClientRequest_oneof_request::List(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &ReadClientRequest_oneof_request::Resolve(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadClientRequest_oneof_request::List(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadClientRequest {
        ReadClientRequest::new()
    }

    fn default_instance() -> &'static ReadClientRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadClientRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadClientRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReadClientRequest {
    fn clear(&mut self) {
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadClientRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadClientRequest_Resolve {
    // message fields
    pub paths: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadClientRequest_Resolve {
    fn default() -> &'a ReadClientRequest_Resolve {
        <ReadClientRequest_Resolve as ::protobuf::Message>::default_instance()
    }
}

impl ReadClientRequest_Resolve {
    pub fn new() -> ReadClientRequest_Resolve {
        ::std::default::Default::default()
    }

    // repeated string paths = 1;


    pub fn get_paths(&self) -> &[::protobuf::Chars] {
        &self.paths
    }
}

impl ::protobuf::Message for ReadClientRequest_Resolve {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.paths {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadClientRequest_Resolve {
        ReadClientRequest_Resolve::new()
    }

    fn default_instance() -> &'static ReadClientRequest_Resolve {
        static mut instance: ::protobuf::lazy::Lazy<ReadClientRequest_Resolve> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadClientRequest_Resolve::new)
        }
    }
}

impl ::protobuf::Clear for ReadClientRequest_Resolve {
    fn clear(&mut self) {
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadClientRequest_Resolve {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadClientRequest_List {
    // message fields
    pub path: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadClientRequest_List {
    fn default() -> &'a ReadClientRequest_List {
        <ReadClientRequest_List as ::protobuf::Message>::default_instance()
    }
}

impl ReadClientRequest_List {
    pub fn new() -> ReadClientRequest_List {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
}

impl ::protobuf::Message for ReadClientRequest_List {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadClientRequest_List {
        ReadClientRequest_List::new()
    }

    fn default_instance() -> &'static ReadClientRequest_List {
        static mut instance: ::protobuf::lazy::Lazy<ReadClientRequest_List> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadClientRequest_List::new)
        }
    }
}

impl ::protobuf::Clear for ReadClientRequest_List {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.path);
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadClientRequest_List {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadServerResponse {
    // message oneof groups
    pub response: ::std::option::Option<ReadServerResponse_oneof_response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse {
    fn default() -> &'a ReadServerResponse {
        <ReadServerResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReadServerResponse_oneof_response {
    Resolved(ReadServerResponse_Resolved),
    List(ReadServerResponse_List),
    Error(ReadServerResponse_Error),
}

impl ReadServerResponse {
    pub fn new() -> ReadServerResponse {
        ::std::default::Default::default()
    }

    // .ReadServerResponse.Resolved Resolved = 1;


    pub fn get_Resolved(&self) -> &ReadServerResponse_Resolved {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(ref v)) => v,
            _ => ReadServerResponse_Resolved::default_instance(),
        }
    }

    // .ReadServerResponse.List List = 2;


    pub fn get_List(&self) -> &ReadServerResponse_List {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::List(ref v)) => v,
            _ => ReadServerResponse_List::default_instance(),
        }
    }

    // .ReadServerResponse.Error Error = 3;


    pub fn get_Error(&self) -> &ReadServerResponse_Error {
        match self.response {
            ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(ref v)) => v,
            _ => ReadServerResponse_Error::default_instance(),
        }
    }
}

impl ::protobuf::Message for ReadServerResponse {
    fn is_initialized(&self) -> bool {
        if let Some(ReadServerResponse_oneof_response::Resolved(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadServerResponse_oneof_response::List(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadServerResponse_oneof_response::Error(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Resolved(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::List(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReadServerResponse_oneof_response::Error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &ReadServerResponse_oneof_response::Resolved(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadServerResponse_oneof_response::List(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadServerResponse_oneof_response::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &ReadServerResponse_oneof_response::Resolved(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadServerResponse_oneof_response::List(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadServerResponse_oneof_response::Error(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse {
        ReadServerResponse::new()
    }

    fn default_instance() -> &'static ReadServerResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse {
    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadServerResponse_Krb5SpnMapping {
    // message fields
    pub addr: ::protobuf::SingularPtrField<super::shared::SocketAddr>,
    pub spn: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Krb5SpnMapping {
    fn default() -> &'a ReadServerResponse_Krb5SpnMapping {
        <ReadServerResponse_Krb5SpnMapping as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Krb5SpnMapping {
    pub fn new() -> ReadServerResponse_Krb5SpnMapping {
        ::std::default::Default::default()
    }

    // .SocketAddr addr = 1;


    pub fn get_addr(&self) -> &super::shared::SocketAddr {
        self.addr.as_ref().unwrap_or_else(|| super::shared::SocketAddr::default_instance())
    }

    // string spn = 2;


    pub fn get_spn(&self) -> &str {
        &self.spn
    }
}

impl ::protobuf::Message for ReadServerResponse_Krb5SpnMapping {
    fn is_initialized(&self) -> bool {
        for v in &self.addr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.spn)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.spn.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.spn);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.addr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.spn.is_empty() {
            os.write_string(2, &self.spn)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Krb5SpnMapping {
        ReadServerResponse_Krb5SpnMapping::new()
    }

    fn default_instance() -> &'static ReadServerResponse_Krb5SpnMapping {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Krb5SpnMapping> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Krb5SpnMapping::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Krb5SpnMapping {
    fn clear(&mut self) {
        self.addr.clear();
        ::protobuf::Clear::clear(&mut self.spn);
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Krb5SpnMapping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadServerResponse_AddrAndAuthToken {
    // message fields
    pub addr: ::protobuf::SingularPtrField<super::shared::SocketAddr>,
    pub token: ::bytes::Bytes,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_AddrAndAuthToken {
    fn default() -> &'a ReadServerResponse_AddrAndAuthToken {
        <ReadServerResponse_AddrAndAuthToken as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_AddrAndAuthToken {
    pub fn new() -> ReadServerResponse_AddrAndAuthToken {
        ::std::default::Default::default()
    }

    // .SocketAddr addr = 1;


    pub fn get_addr(&self) -> &super::shared::SocketAddr {
        self.addr.as_ref().unwrap_or_else(|| super::shared::SocketAddr::default_instance())
    }

    // bytes token = 2;


    pub fn get_token(&self) -> &[u8] {
        &self.token
    }
}

impl ::protobuf::Message for ReadServerResponse_AddrAndAuthToken {
    fn is_initialized(&self) -> bool {
        for v in &self.addr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_bytes_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.addr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.token.is_empty() {
            os.write_bytes(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_AddrAndAuthToken {
        ReadServerResponse_AddrAndAuthToken::new()
    }

    fn default_instance() -> &'static ReadServerResponse_AddrAndAuthToken {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_AddrAndAuthToken> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_AddrAndAuthToken::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_AddrAndAuthToken {
    fn clear(&mut self) {
        self.addr.clear();
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_AddrAndAuthToken {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadServerResponse_Resolution {
    // message fields
    pub addrs: ::protobuf::RepeatedField<ReadServerResponse_AddrAndAuthToken>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Resolution {
    fn default() -> &'a ReadServerResponse_Resolution {
        <ReadServerResponse_Resolution as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Resolution {
    pub fn new() -> ReadServerResponse_Resolution {
        ::std::default::Default::default()
    }

    // repeated .ReadServerResponse.AddrAndAuthToken addrs = 1;


    pub fn get_addrs(&self) -> &[ReadServerResponse_AddrAndAuthToken] {
        &self.addrs
    }
}

impl ::protobuf::Message for ReadServerResponse_Resolution {
    fn is_initialized(&self) -> bool {
        for v in &self.addrs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.addrs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addrs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addrs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Resolution {
        ReadServerResponse_Resolution::new()
    }

    fn default_instance() -> &'static ReadServerResponse_Resolution {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Resolution> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Resolution::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Resolution {
    fn clear(&mut self) {
        self.addrs.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Resolution {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadServerResponse_Resolved {
    // message fields
    pub resolver_id: u64,
    pub krb5_spns: ::protobuf::RepeatedField<ReadServerResponse_Krb5SpnMapping>,
    pub results: ::protobuf::RepeatedField<ReadServerResponse_Resolution>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Resolved {
    fn default() -> &'a ReadServerResponse_Resolved {
        <ReadServerResponse_Resolved as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Resolved {
    pub fn new() -> ReadServerResponse_Resolved {
        ::std::default::Default::default()
    }

    // uint64 resolver_id = 1;


    pub fn get_resolver_id(&self) -> u64 {
        self.resolver_id
    }

    // repeated .ReadServerResponse.Krb5SpnMapping krb5_spns = 2;


    pub fn get_krb5_spns(&self) -> &[ReadServerResponse_Krb5SpnMapping] {
        &self.krb5_spns
    }

    // repeated .ReadServerResponse.Resolution results = 3;


    pub fn get_results(&self) -> &[ReadServerResponse_Resolution] {
        &self.results
    }
}

impl ::protobuf::Message for ReadServerResponse_Resolved {
    fn is_initialized(&self) -> bool {
        for v in &self.krb5_spns {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.results {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolver_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.krb5_spns)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.resolver_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.resolver_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.krb5_spns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.resolver_id != 0 {
            os.write_uint64(1, self.resolver_id)?;
        }
        for v in &self.krb5_spns {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.results {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Resolved {
        ReadServerResponse_Resolved::new()
    }

    fn default_instance() -> &'static ReadServerResponse_Resolved {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Resolved> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Resolved::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Resolved {
    fn clear(&mut self) {
        self.resolver_id = 0;
        self.krb5_spns.clear();
        self.results.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Resolved {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadServerResponse_List {
    // message fields
    pub paths: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_List {
    fn default() -> &'a ReadServerResponse_List {
        <ReadServerResponse_List as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_List {
    pub fn new() -> ReadServerResponse_List {
        ::std::default::Default::default()
    }

    // repeated string paths = 1;


    pub fn get_paths(&self) -> &[::protobuf::Chars] {
        &self.paths
    }
}

impl ::protobuf::Message for ReadServerResponse_List {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.paths {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_List {
        ReadServerResponse_List::new()
    }

    fn default_instance() -> &'static ReadServerResponse_List {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_List> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_List::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_List {
    fn clear(&mut self) {
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_List {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReadServerResponse_Error {
    // message fields
    pub description: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadServerResponse_Error {
    fn default() -> &'a ReadServerResponse_Error {
        <ReadServerResponse_Error as ::protobuf::Message>::default_instance()
    }
}

impl ReadServerResponse_Error {
    pub fn new() -> ReadServerResponse_Error {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
}

impl ::protobuf::Message for ReadServerResponse_Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadServerResponse_Error {
        ReadServerResponse_Error::new()
    }

    fn default_instance() -> &'static ReadServerResponse_Error {
        static mut instance: ::protobuf::lazy::Lazy<ReadServerResponse_Error> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadServerResponse_Error::new)
        }
    }
}

impl ::protobuf::Clear for ReadServerResponse_Error {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadServerResponse_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteClientRequest {
    // message oneof groups
    pub request: ::std::option::Option<WriteClientRequest_oneof_request>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest {
    fn default() -> &'a WriteClientRequest {
        <WriteClientRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum WriteClientRequest_oneof_request {
    Publish(WriteClientRequest_Publish),
    Unpublish(WriteClientRequest_Unpublish),
    Clear(WriteClientRequest_Clear),
    Heartbeat(WriteClientRequest_Heartbeat),
}

impl WriteClientRequest {
    pub fn new() -> WriteClientRequest {
        ::std::default::Default::default()
    }

    // .WriteClientRequest.Publish Publish = 1;


    pub fn get_Publish(&self) -> &WriteClientRequest_Publish {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(ref v)) => v,
            _ => WriteClientRequest_Publish::default_instance(),
        }
    }

    // .WriteClientRequest.Unpublish Unpublish = 2;


    pub fn get_Unpublish(&self) -> &WriteClientRequest_Unpublish {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(ref v)) => v,
            _ => WriteClientRequest_Unpublish::default_instance(),
        }
    }

    // .WriteClientRequest.Clear Clear = 3;


    pub fn get_Clear(&self) -> &WriteClientRequest_Clear {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(ref v)) => v,
            _ => WriteClientRequest_Clear::default_instance(),
        }
    }

    // .WriteClientRequest.Heartbeat Heartbeat = 4;


    pub fn get_Heartbeat(&self) -> &WriteClientRequest_Heartbeat {
        match self.request {
            ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(ref v)) => v,
            _ => WriteClientRequest_Heartbeat::default_instance(),
        }
    }
}

impl ::protobuf::Message for WriteClientRequest {
    fn is_initialized(&self) -> bool {
        if let Some(WriteClientRequest_oneof_request::Publish(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteClientRequest_oneof_request::Unpublish(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteClientRequest_oneof_request::Clear(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteClientRequest_oneof_request::Heartbeat(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Publish(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Unpublish(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Clear(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(WriteClientRequest_oneof_request::Heartbeat(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &WriteClientRequest_oneof_request::Publish(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteClientRequest_oneof_request::Unpublish(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteClientRequest_oneof_request::Clear(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteClientRequest_oneof_request::Heartbeat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &WriteClientRequest_oneof_request::Publish(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteClientRequest_oneof_request::Unpublish(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteClientRequest_oneof_request::Clear(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteClientRequest_oneof_request::Heartbeat(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest {
        WriteClientRequest::new()
    }

    fn default_instance() -> &'static WriteClientRequest {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest {
    fn clear(&mut self) {
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteClientRequest_Publish {
    // message fields
    pub paths: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Publish {
    fn default() -> &'a WriteClientRequest_Publish {
        <WriteClientRequest_Publish as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Publish {
    pub fn new() -> WriteClientRequest_Publish {
        ::std::default::Default::default()
    }

    // repeated string paths = 1;


    pub fn get_paths(&self) -> &[::protobuf::Chars] {
        &self.paths
    }
}

impl ::protobuf::Message for WriteClientRequest_Publish {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.paths {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Publish {
        WriteClientRequest_Publish::new()
    }

    fn default_instance() -> &'static WriteClientRequest_Publish {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Publish> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Publish::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Publish {
    fn clear(&mut self) {
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Publish {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteClientRequest_Unpublish {
    // message fields
    pub paths: ::std::vec::Vec<::protobuf::Chars>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Unpublish {
    fn default() -> &'a WriteClientRequest_Unpublish {
        <WriteClientRequest_Unpublish as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Unpublish {
    pub fn new() -> WriteClientRequest_Unpublish {
        ::std::default::Default::default()
    }

    // repeated string paths = 1;


    pub fn get_paths(&self) -> &[::protobuf::Chars] {
        &self.paths
    }
}

impl ::protobuf::Message for WriteClientRequest_Unpublish {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_carllerche_string_into(wire_type, is, &mut self.paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.paths {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Unpublish {
        WriteClientRequest_Unpublish::new()
    }

    fn default_instance() -> &'static WriteClientRequest_Unpublish {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Unpublish> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Unpublish::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Unpublish {
    fn clear(&mut self) {
        self.paths.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Unpublish {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteClientRequest_Clear {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Clear {
    fn default() -> &'a WriteClientRequest_Clear {
        <WriteClientRequest_Clear as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Clear {
    pub fn new() -> WriteClientRequest_Clear {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteClientRequest_Clear {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Clear {
        WriteClientRequest_Clear::new()
    }

    fn default_instance() -> &'static WriteClientRequest_Clear {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Clear> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Clear::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Clear {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Clear {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteClientRequest_Heartbeat {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteClientRequest_Heartbeat {
    fn default() -> &'a WriteClientRequest_Heartbeat {
        <WriteClientRequest_Heartbeat as ::protobuf::Message>::default_instance()
    }
}

impl WriteClientRequest_Heartbeat {
    pub fn new() -> WriteClientRequest_Heartbeat {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteClientRequest_Heartbeat {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteClientRequest_Heartbeat {
        WriteClientRequest_Heartbeat::new()
    }

    fn default_instance() -> &'static WriteClientRequest_Heartbeat {
        static mut instance: ::protobuf::lazy::Lazy<WriteClientRequest_Heartbeat> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteClientRequest_Heartbeat::new)
        }
    }
}

impl ::protobuf::Clear for WriteClientRequest_Heartbeat {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteClientRequest_Heartbeat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteServerResponse {
    // message oneof groups
    pub response: ::std::option::Option<WriteServerResponse_oneof_response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse {
    fn default() -> &'a WriteServerResponse {
        <WriteServerResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum WriteServerResponse_oneof_response {
    Published(WriteServerResponse_Published),
    Unpublished(WriteServerResponse_Unpublished),
    Error(WriteServerResponse_Error),
}

impl WriteServerResponse {
    pub fn new() -> WriteServerResponse {
        ::std::default::Default::default()
    }

    // .WriteServerResponse.Published Published = 1;


    pub fn get_Published(&self) -> &WriteServerResponse_Published {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(ref v)) => v,
            _ => WriteServerResponse_Published::default_instance(),
        }
    }

    // .WriteServerResponse.Unpublished Unpublished = 2;


    pub fn get_Unpublished(&self) -> &WriteServerResponse_Unpublished {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(ref v)) => v,
            _ => WriteServerResponse_Unpublished::default_instance(),
        }
    }

    // .WriteServerResponse.Error Error = 3;


    pub fn get_Error(&self) -> &WriteServerResponse_Error {
        match self.response {
            ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(ref v)) => v,
            _ => WriteServerResponse_Error::default_instance(),
        }
    }
}

impl ::protobuf::Message for WriteServerResponse {
    fn is_initialized(&self) -> bool {
        if let Some(WriteServerResponse_oneof_response::Published(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteServerResponse_oneof_response::Unpublished(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(WriteServerResponse_oneof_response::Error(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Published(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Unpublished(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(WriteServerResponse_oneof_response::Error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &WriteServerResponse_oneof_response::Published(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteServerResponse_oneof_response::Unpublished(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &WriteServerResponse_oneof_response::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &WriteServerResponse_oneof_response::Published(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteServerResponse_oneof_response::Unpublished(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &WriteServerResponse_oneof_response::Error(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse {
        WriteServerResponse::new()
    }

    fn default_instance() -> &'static WriteServerResponse {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse {
    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteServerResponse_Published {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse_Published {
    fn default() -> &'a WriteServerResponse_Published {
        <WriteServerResponse_Published as ::protobuf::Message>::default_instance()
    }
}

impl WriteServerResponse_Published {
    pub fn new() -> WriteServerResponse_Published {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteServerResponse_Published {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse_Published {
        WriteServerResponse_Published::new()
    }

    fn default_instance() -> &'static WriteServerResponse_Published {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse_Published> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse_Published::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse_Published {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse_Published {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteServerResponse_Unpublished {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse_Unpublished {
    fn default() -> &'a WriteServerResponse_Unpublished {
        <WriteServerResponse_Unpublished as ::protobuf::Message>::default_instance()
    }
}

impl WriteServerResponse_Unpublished {
    pub fn new() -> WriteServerResponse_Unpublished {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteServerResponse_Unpublished {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse_Unpublished {
        WriteServerResponse_Unpublished::new()
    }

    fn default_instance() -> &'static WriteServerResponse_Unpublished {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse_Unpublished> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse_Unpublished::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse_Unpublished {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse_Unpublished {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct WriteServerResponse_Error {
    // message fields
    pub description: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteServerResponse_Error {
    fn default() -> &'a WriteServerResponse_Error {
        <WriteServerResponse_Error as ::protobuf::Message>::default_instance()
    }
}

impl WriteServerResponse_Error {
    pub fn new() -> WriteServerResponse_Error {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
}

impl ::protobuf::Message for WriteServerResponse_Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteServerResponse_Error {
        WriteServerResponse_Error::new()
    }

    fn default_instance() -> &'static WriteServerResponse_Error {
        static mut instance: ::protobuf::lazy::Lazy<WriteServerResponse_Error> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(WriteServerResponse_Error::new)
        }
    }
}

impl ::protobuf::Clear for WriteServerResponse_Error {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteServerResponse_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
